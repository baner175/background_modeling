c3 <- rep(c(0,1), c(20,10))
(X <- cbind(c1, c2, c3))
pow_fun <- function(d)
{
ncp <- 4*(d^2)/15
cutoff <- qf(0.95, df1  = 1, df2 = 27, ncp = ncp)
pchisq(cutoff, ncp = ncp, df = 1, lower.tail = FALSE)
}
d <- seq(0.05, 10, 0.01)
pow_seq <- sapply(d, pow_fun)
plot(d,pow_seq, type = 'l', lwd = 3)
c1 <- rep(c(1,0),c(10,20))
c2 <- rep(c(0,1,0), c(10,10,10))
c3 <- rep(c(0,1), c(20,10))
(X <- cbind(c1, c2, c3))
pow_fun <- function(d)
{
ncp <- 4*(d^2)/15
cutoff <- qf(0.95, df1  = 1, df2 = 27)
pf(cutoff,  df1  = 1, df2 = 27, ncp = ncp, lower.tail = FALSE)
}
d <- seq(0.05, 10, 0.01)
pow_seq <- sapply(d, pow_fun)
plot(d,pow_seq, type = 'l', lwd = 3)
abline(h=0.05, lwd = 2, lty = 2)
abline(h=0.05, lwd = 2, lty = 2, col = 'red')
abline(h=0.05, v = 0, lwd = 2, lty = 2, col = 'red')
points(0,0, lty = 'red', pch = 16)
points(x = 0,y = 0, lty = 'red', pch = 16)
?points
points(x = 0,y = 0, col = 'red', pch = 16)
points(x = 0,y = 0, col = 'red')
points(x = 0,y = 0)
?points
points(x = 0,y = 0, cex = 3)
plot(d,pow_seq, type = 'l', lwd = 3)
abline(h=0.05, v = 0, lwd = 2, lty = 2, col = 'red')
points(x = 0,y = 0, cex = 2)
abline(h=0.95, lwd = 2, lty = 2, col = 'red')
c1 <- rep(c(1,0),c(10,20))
c2 <- rep(c(0,1,0), c(10,10,10))
c3 <- rep(c(0,1), c(20,10))
(X <- cbind(c1, c2, c3))
pow_fun <- function(d)
{
ncp <- 4*(d^2)/15
cutoff <- qf(0.95, df1  = 1, df2 = 27)
pf(cutoff,  df1  = 1, df2 = 27, ncp = ncp, lower.tail = FALSE)
}
d <- seq(0.05, 10, 0.01)
pow_seq <- sapply(d, pow_fun)
plot(d,pow_seq, type = 'l', lwd = 3)
abline(h=0.05, v = 0, lwd = 2, lty = 2, col = 'red')
abline(h=0.95, lwd = 2, lty = 2, col = 'red')
c1 <- rep(c(1,0),c(10,20))
c2 <- rep(c(0,1,0), c(10,10,10))
c3 <- rep(c(0,1), c(20,10))
(X <- cbind(c1, c2, c3))
pow_fun <- function(d)
{
ncp <- 4*(d^2)/15
cutoff <- qf(0.95, df1  = 1, df2 = 27)
pf(cutoff,  df1  = 1, df2 = 27, ncp = ncp, lower.tail = FALSE)
}
d <- seq(0.05, 10, 0.01)
pow_seq <- sapply(d, pow_fun)
plot(d,pow_seq, type = 'l', lwd = 3)
abline(h=0.05, lwd = 2, lty = 2, col = 'red')
abline(h=0.95, lwd = 2, lty = 2, col = 'red')
pow_fun <- function(d)
{
ncp <- 4*(d^2)/15
cutoff <- qf(0.95, df1  = 1, df2 = 27)
pf(cutoff,  df1  = 1, df2 = 27, ncp = ncp, lower.tail = FALSE)
}
pow_fun <- function(d)
{
ncp <- 4*(d^2)/15
cutoff <- qf(0.95, df1  = 1, df2 = 27)
pf(cutoff,  df1  = 1, df2 = 27, ncp = ncp, lower.tail = FALSE)
}
d <- seq(0.05, 10, 0.01)
pow_seq <- sapply(d, pow_fun)
plot(d,pow_seq, type = 'l', lwd = 3)
abline(h=0.05, lwd = 2, lty = 2, col = 'red')
abline(h=0.95, lwd = 2, lty = 2, col = 'red')
pow_fun <- function(d)
{
ncp <- 4*(d^2)/15
cutoff <- qf(0.95, df1  = 1, df2 = 27)
pf(cutoff,  df1  = 1, df2 = 27, ncp = ncp, lower.tail = FALSE)
}
d <- seq(0, 10, 0.01)
pow_seq <- sapply(d, pow_fun)
plot(d,pow_seq, type = 'l', lwd = 3)
abline(h=0.05, lwd = 2, lty = 2, col = 'red')
abline(h=0.95, lwd = 2, lty = 2, col = 'red')
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Signal_Normal - Background_Normal - 2")
source('bases on [l,u].R')
source('bases on [l,u].R')
fb <- function(x) dtrunc(x, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
library(ggplot2)
set.seed(12345)
# checking if delta < 0:
integrate(function(t) S1(t, mean = mean_sig,
sd = sd_sig)*dtrunc(t, mean = mean_back,
sd = sd_back, spec = 'norm',
a = l, b = u),
lower = l, upper = u)$value
n <- 5e3
back <- rtrunc(n, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
sig <- rtrunc(n, spec = 'norm',
mean = mean_sig, sd = sd_sig,
a = l, b = u)
u_mask <- rbinom(n, size = 1, prob = eta_true)
obs <- ifelse(u_mask, sig, back)
xs <- seq(l,u,0.01)
y_sig <- dtrunc(xs, spec = 'norm',
mean = mean_sig, sd = sd_sig,
a = l, b = u)
y_back <- dtrunc(xs, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
y_real <- eta_true*y_sig + (1 - eta_true)*y_back
hs <- hist(obs, breaks = 30, probability = TRUE)
basic_plt<- ggplot(mapping = aes(x = obs)) + geom_histogram(mapping =
aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_real, color = 'Actual Mixture'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_back, color = 'Background'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = gb(xs), color = 'Proposal Background'),
lwd = 1.3) +
scale_color_manual(values = c('Background' = 'orange',
'Proposal Background' = 'red',
'Actual Mixture' = 'black'))
basic_plt
T_basis[[1]]
T_basis[[1]](l+0.2)
f <- function(x) eta_true*fs(x) + (1-eta_true)fb(x)
f <- function(x) eta_true*fs(x) + (1-eta_true)*fb(x)
tau_true <- c()
for(j in 1:length(T_basis))
{
real_inner <- integrate(function(t) T_basis[[j]](t)*f(t), l, u)$value
tau_true <- c(tau_true, real_inner)
}
tau_true
theta_true <- integrate(function(t) S1(t)*f(t), l, u)$value
tau_true <- c()
for(j in 1:length(T_basis))
{
real_inner <- integrate(function(t) T_basis[[j]](t)*f(t), l, u)$value
tau_true <- c(tau_true, real_inner)
}
tau_true
(theta_true <- integrate(function(t) S1(t)*f(t), l, u)$value)
(delta_true <- integrate(function(t) S1(t)*fb(t), l, u)$value)
eta_true*norm_S + (1-eta_true)*delta_true
eta_true*norm_S + (1-eta_true)*delta_true == theta_true
eta_true*norm_S + (1-eta_true)*delta_true
theta_true
round(eta_true*norm_S + (1-eta_true)*delta_true, 6) == theta_true
round(eta_true*norm_S + (1-eta_true)*delta_true, 6) == round(theta_true,6)
round(eta_true*norm_S + (1-eta_true)*delta_true, 10) == round(theta_true,10)
sum_tau_true <- sum(tau_true^2)
(eta_tilde_true <- theta_true/norm_S)
sum_tau_true <- sum(tau_true^2)
(eta_tilde_true <- theta_true/norm_S)
LHS_num_true <- sum_tau_true + norm_S^2 - norm_S*theta_true
LHS_den_true <- sqrt(sum_tau_true + 2*norm_S^2 - 2*norm_S*theta_true)
LHS_true <- LHS_num_true/LHS_den_true
RHS_num_true <- sum_tau_true/(1-eta_tilde_true) + norm_S^2
RHS_den_true <- sqrt(sum_tau_true/((1-eta_tilde_true)^2) + norm_S^2 )
RHS_true <- RHS_num_true/RHS_den_true
LHS_true>RHS_true
LHS_true
RHS_true
norm_fb_bar_true <- sqrt(sum(tau_vec_true^2)/((1-eta_tilde)^2))
norm_fb_bar_true <- sqrt(sum(tau_true^2)/((1-eta_tilde)^2))
norm_fb_bar_true <- sqrt(sum(tau_true^2)/((1-eta_tilde_true)^2))
plot(x = seq(-0.001,norm_fb_bar_true+0.0001,length.out=10),
y = seq(delta_true+0.00001, norm_S+1, length.out = 10),
type = 'n',
xlab = '', ylab = '')
abline(h = 0, lwd = 2, col = 'red')
plot(x = seq(-0.001,norm_fb_bar_true+0.0001,length.out=10),
y = seq(delta_true-0.00001, norm_S+1, length.out = 10),
type = 'n',
xlab = '', ylab = '')
abline(h = 0, lwd = 2, col = 'red')
plot(x = seq(-0.001,norm_fb_bar_true+0.0001,length.out=10),
y = seq(delta_true-0.0001, norm_S+1, length.out = 10),
type = 'n',
xlab = '', ylab = '')
abline(h = 0, lwd = 2, col = 'red')
lines(x = c(0, 0), y = c(0, norm_S), col = 'blue')
norm_fb_true <- sqrt(sum(tau_true^2)/((1-eta_true)^2))
lines(x = c(norm_fb_true, norm_fb_true), y = c(0, delta_true), col = 'brown')
plot(x = seq(-0.001,norm_fb_bar_true+0.0001,length.out=10),
y = seq(delta_true-0.0001, norm_S+1, length.out = 10),
type = 'n',
xlab = '', ylab = '')
abline(h = 0, lwd = 2, col = 'red')
lines(x = c(0, 0), y = c(0, norm_S), col = 'blue', lwd = 2)
lines(x = c(norm_fb_true, norm_fb_true), y = c(0, delta_true),
col = 'brown', lwd = 2)
lines(x = c(0, norm_fb_true),
y = c(norm_S, delta_true),
lwd = 2, col = 'black')
norm_f_true <- sqrt(tau_true^2)
lines(x = c(norm_fb_true, norm_fb_true),
y = c(0, theta_true))
(norm_fb_bar_true <- sqrt(sum(tau_true^2)/((1-eta_tilde_true)^2)))
(norm_fb_true <- sqrt(sum(tau_true^2)/((1-eta_true)^2)))
(norm_f_true <- sqrt(tau_true^2))
(norm_f_true <- sqrt(sum(tau_true^2)))
(norm_fb_bar_true <- sqrt(sum(tau_true^2)/((1-eta_tilde_true)^2)))
(norm_fb_true <- sqrt(sum(tau_true^2)/((1-eta_true)^2)))
(norm_f_true <- sqrt(sum(tau_true^2)))
plot(x = seq(-0.001,norm_fb_bar_true+0.0001,length.out=10),
y = seq(delta_true-0.0001, norm_S+1, length.out = 10),
type = 'n',
xlab = '', ylab = '')
abline(h = 0, lwd = 2, col = 'red')
lines(x = c(0, 0), y = c(0, norm_S), col = 'blue', lwd = 2)
lines(x = c(norm_fb_true, norm_fb_true), y = c(0, delta_true),
col = 'brown', lwd = 2)
lines(x = c(0, norm_fb_true),
y = c(norm_S, delta_true),
lwd = 2, col = 'black')
lines(x = c(norm_fb_true, norm_fb_true),
y = c(0, theta_true))
plot(x = seq(-0.001,norm_fb_bar_true+0.0001,length.out=10),
y = seq(delta_true-0.0001, norm_S+1, length.out = 10),
type = 'n',
xlab = '', ylab = '')
plot(x = seq(-0.001,norm_fb_bar_true+0.0001,length.out=10),
y = seq(delta_true-0.0001, norm_S+1, length.out = 10),
type = 'n',
xlab = '', ylab = '')
abline(h = 0, lwd = 2, col = 'red')
lines(x = c(0, 0), y = c(0, norm_S), col = 'blue', lwd = 2)
lines(x = c(norm_fb_true, norm_fb_true), y = c(0, delta_true),
col = 'brown', lwd = 2)
lines(x = c(0, norm_fb_true),
y = c(norm_S, delta_true),
lwd = 2, col = 'black')
lines(x = c(norm_f_true, norm_fb_true),
y = c(0, theta_true))
theta_true
abline(h = theta_true)
plot(x = seq(-0.001,norm_fb_bar_true+0.0001,length.out=10),
y = seq(delta_true-0.0001, norm_S+1, length.out = 10),
type = 'n',
xlab = '', ylab = '')
abline(h = 0, lwd = 2, col = 'red')
lines(x = c(0, 0), y = c(0, norm_S), col = 'blue', lwd = 2)
lines(x = c(norm_fb_true, norm_fb_true), y = c(0, delta_true),
col = 'brown', lwd = 2)
lines(x = c(0, norm_fb_true),
y = c(norm_S, delta_true),
lwd = 2, col = 'black')
lines(x = c(norm_f_true, norm_f_true),
y = c(0, theta_true))
(norm_fb_perp_bar_true <- sqrt(sum(tau_true^2)/((1-eta_tilde_true)^2)))
(norm_fb_perp_true <- sqrt(sum(tau_true^2)/((1-eta_true)^2)))
(norm_f_perp_true <- sqrt(sum(tau_true^2)))
plot(x = seq(-0.001,norm_fb_bar_true+0.0001,length.out=10),
y = seq(delta_true-0.0001, norm_S+1, length.out = 10),
type = 'n',
xlab = '', ylab = '')
abline(h = 0, lwd = 2, col = 'red')
lines(x = c(0, 0), y = c(0, norm_S), col = 'blue', lwd = 2)
lines(x = c(norm_fb_perp_true, norm_fb_perp_true), y = c(0, delta_true),
col = 'brown', lwd = 2)
lines(x = c(0, norm_fb_perp_true),
y = c(norm_S, delta_true),
lwd = 2, col = 'black')
lines(x = c(norm_f_perp_true, norm_f_perp_true),
y = c(0, theta_true))
lines(x = c(0,norm_f_perp_true),
y = c(norm_S, 0),
col = 'yellow')
lines(x = c(0,norm_f_perp_true),
y = c(norm_S, 0),
col = 'gold')
lines(x = c(0,norm_f_perp_true),
y = c(norm_S, 0),
col = 'green')
plot(x = seq(-0.001,norm_fb_bar_true+0.0001,length.out=10),
y = seq(delta_true-0.0001, norm_S+1, length.out = 10),
type = 'n',
xlab = '', ylab = '')
abline(h = 0, lwd = 2, col = 'red')
lines(x = c(0, 0), y = c(0, norm_S), col = 'blue', lwd = 2)
lines(x = c(norm_fb_perp_true, norm_fb_perp_true), y = c(0, delta_true),
col = 'brown', lwd = 2)
lines(x = c(0, norm_fb_perp_true),
y = c(norm_S, delta_true),
lwd = 2, col = 'black')
lines(x = c(norm_f_perp_true, norm_f_perp_true),
y = c(0, theta_true))
lines(x = c(0,norm_f_perp_true),
y = c(norm_S, 0),
col = 'green')
tau_vec <- c()
lines(x = c(0,norm_fb_perp_true),
y = c(norm_S, 0),
col = 'green')
acos()
?acos()
comm_ang <- atan(norm_f_perp_true/norm_S)
comm_ang
phi1 <- atan(norm_fb_perp_true/norm_S) - comm_ang
phi1
phi2 <- atan(norm_fb_perp_true/(theta_true-delta_true))
phi2
atan(norm_fb_perp_true/norm_S)
phi1 <- atan(norm_fb_perp_true/norm_S) - comm_ang
phi1
atan(norm_fb_perp_true/norm_S)
atan(norm_fb_perp_true/(norm_S-delta_true))
phi2 <- atan(norm_fb_perp_true/(norm_S-delta_true)) - comm_ang
phir2
phi2
phi1
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Signal_Normal - Background_Normal - 2")
source('bases on [l,u].R')
fb <- function(x) dtrunc(x, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
f <- function(x) eta_true*fs(x) + (1-eta_true)*fb(x)
fs
source('bases on [l,u].R')
fb <- function(x) dtrunc(x, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
f <- function(x) eta_true*fs(x) + (1-eta_true)*fb(x)
library(ggplot2)
set.seed(12345)
# checking if delta < 0:
integrate(function(t) S1(t, mean = mean_sig,
sd = sd_sig)*dtrunc(t, mean = mean_back,
sd = sd_back, spec = 'norm',
a = l, b = u),
lower = l, upper = u)$value
n <- 5e3
back <- rtrunc(n, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
sig <- rtrunc(n, spec = 'norm',
mean = mean_sig, sd = sd_sig,
a = l, b = u)
u_mask <- rbinom(n, size = 1, prob = eta_true)
obs <- ifelse(u_mask, sig, back)
xs <- seq(l,u,0.01)
y_sig <- dtrunc(xs, spec = 'norm',
mean = mean_sig, sd = sd_sig,
a = l, b = u)
y_back <- dtrunc(xs, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
y_real <- eta_true*y_sig + (1 - eta_true)*y_back
hs <- hist(obs, breaks = 30, probability = TRUE)
basic_plt<- ggplot(mapping = aes(x = obs)) + geom_histogram(mapping =
aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_real, color = 'Actual Mixture'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_back, color = 'Background'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = gb(xs), color = 'Proposal Background'),
lwd = 1.3) +
scale_color_manual(values = c('Background' = 'orange',
'Proposal Background' = 'red',
'Actual Mixture' = 'black'))
basic_plt
(norm_fb_perp_bar_true <- sqrt(sum(tau_true^2)/((1-eta_tilde_true)^2)))
tau_true <- c()
for(j in 1:length(T_basis))
{
real_inner <- integrate(function(t) T_basis[[j]](t)*f(t), l, u)$value
tau_true <- c(tau_true, real_inner)
}
tau_true
(theta_true <- integrate(function(t) S1(t)*f(t), l, u)$value)
(delta_true <- integrate(function(t) S1(t)*fb(t), l, u)$value)
(eta_tilde_true <- theta_true/norm_S)
(norm_fb_perp_bar_true <- sqrt(sum(tau_true^2)/((1-eta_tilde_true)^2)))
(norm_fb_perp_bar_true <- sqrt(sum(tau_true^2)/((1-eta_tilde_true)^2)))
(norm_fb_perp_true <- sqrt(sum(tau_true^2)/((1-eta_true)^2)))
(norm_f_perp_true <- sqrt(sum(tau_true^2)))
plot(x = seq(-0.001,norm_fb_bar_true+0.0001,length.out=10),
y = seq(delta_true-0.0001, norm_S+1, length.out = 10),
type = 'n',
xlab = '', ylab = '')
plot(x = seq(-0.001,norm_fb_perp_bar_true+0.0001,length.out=10),
y = seq(delta_true-0.0001, norm_S+1, length.out = 10),
type = 'n',
xlab = '', ylab = '')
abline(h = 0, lwd = 2, col = 'red')
lines(x = c(0, 0), y = c(0, norm_S), col = 'blue', lwd = 2)
lines(x = c(norm_fb_perp_true, norm_fb_perp_true), y = c(0, delta_true),
col = 'brown', lwd = 2)
lines(x = c(0, norm_fb_perp_true),
y = c(norm_S, delta_true),
lwd = 2, col = 'black')
lines(x = c(norm_f_perp_true, norm_f_perp_true),
y = c(0, theta_true))
lines(x = c(0,norm_f_perp_true),
y = c(norm_S, 0),
col = 'green')
abline(v = norm_fb_perp_bar_true, lty = 2)
norm_fb_perp_bar_true
norm_S*norm_fb_perp_true/(norm-delta_true)
norm_S*norm_fb_perp_true/(norm_S-delta_true)
source('bases on [l,u].R')
fb <- function(x) dtrunc(x, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
f <- function(x) eta_true*fs(x) + (1-eta_true)*fb(x)
library(ggplot2)
set.seed(12345)
# checking if delta < 0:
integrate(function(t) S1(t, mean = mean_sig,
sd = sd_sig)*dtrunc(t, mean = mean_back,
sd = sd_back, spec = 'norm',
a = l, b = u),
lower = l, upper = u)$value
n <- 5e3
back <- rtrunc(n, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
sig <- rtrunc(n, spec = 'norm',
mean = mean_sig, sd = sd_sig,
a = l, b = u)
u_mask <- rbinom(n, size = 1, prob = eta_true)
obs <- ifelse(u_mask, sig, back)
xs <- seq(l,u,0.01)
y_sig <- dtrunc(xs, spec = 'norm',
mean = mean_sig, sd = sd_sig,
a = l, b = u)
y_back <- dtrunc(xs, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
y_real <- eta_true*y_sig + (1 - eta_true)*y_back
hs <- hist(obs, breaks = 30, probability = TRUE)
basic_plt<- ggplot(mapping = aes(x = obs)) + geom_histogram(mapping =
aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_real, color = 'Actual Mixture'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_back, color = 'Background'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = gb(xs), color = 'Proposal Background'),
lwd = 1.3) +
scale_color_manual(values = c('Background' = 'orange',
'Proposal Background' = 'red',
'Actual Mixture' = 'black'))
basic_plt
tau_true <- c()
for(j in 1:length(T_basis))
{
real_inner <- integrate(function(t) T_basis[[j]](t)*f(t), l, u)$value
tau_true <- c(tau_true, real_inner)
}
tau_true
(theta_true <- integrate(function(t) S1(t)*f(t), l, u)$value)
(delta_true <- integrate(function(t) S1(t)*fb(t), l, u)$value)
sum_tau_true <- sum(tau_true^2)
(eta_tilde_true <- theta_true/norm_S)
LHS_num_true <- sum_tau_true + norm_S^2 - norm_S*theta_true
LHS_den_true <- sqrt(sum_tau_true + theta_true^2 + norm_S^2 - 2*norm_S*theta_true)
LHS_true <- LHS_num_true/LHS_den_true
RHS_num_true <- sum_tau_true/(1-eta_tilde_true) + norm_S^2
RHS_den_true <- sqrt(sum_tau_true/((1-eta_tilde_true)^2) + norm_S^2 )
RHS_true <- RHS_num_true/RHS_den_true
LHS_true>RHS_true
LHS_true == RHS_true
LHS_true
RHS_true
round(LHS_true, 10) == round(RHS_true, 10)
tau_vec <- c()
S1_vec <- sapply(obs, function(t) S1(t, mean = mean_sig,
sd = sd_sig))
(theta <- mean(S1_vec))
# obs_Gb <- sapply(obs, Gb)
for (j in 1:length(T_basis)) {
fun_vec <- sapply(obs, T_basis[[j]])
tau_vec <- c(tau_vec, mean(fun_vec))
}
sum_tau <- sum(tau_vec^2)
eta_tilde <- theta/norm_S
LHS_num <- sum_tau + norm_S^2 - norm_S*theta
LHS_den <- sqrt(sum_tau + theta^2 + norm_S^2 - 2*norm_S*theta)
LHS <- LHS_num/LHS_den
RHS_num <- sum_tau/(1-eta_tilde) + norm_S^2
RHS_den <- sqrt( sum_tau/((1-eta_tilde)^2) + norm_S^2 )
RHS <- RHS_num/RHS_den
LHS
RHS
LHS == RHS
round(LHS, 10) == round(RHS, 10)
