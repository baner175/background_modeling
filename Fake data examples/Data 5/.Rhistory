pnorm(-2.56)
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/New example")
# ESTIMATED eta: 0.02074792
# Test for eta: null hypothesis (eta = 0) rejected with p-value 0.004746472
source('bases on [l,u] - gb with 2 bumps.R')
library(ggplot2)
xs <- seq(l,u,0.01)
y_sig <- sapply(xs, fs)
y_kde <- sapply(xs, kde)
y_gb <- sapply(xs, gb)
obs_new <- read.csv('test_data.csv', header = TRUE)$x
hs <- hist(obs_new, breaks = 50, probability = TRUE)
basic_plt<- ggplot(mapping = aes(x = obs_new)) +
ylim(0, .5) +
geom_histogram(mapping = aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_kde, color = 'KDE for Mixture'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_gb, color = 'Proposal Background'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_sig, color = 'True Signal'),
lwd = 1.3) +
scale_color_manual(values = c('KDE for Mixture' = 'black',
'Proposal Background' = 'red',
'True Signal' = 'blue')) +
geom_vline(xintercept = c(M_lower, M_upper),
lwd = 1.3, lty = 2, color = 'grey')
basic_plt
#-----------------------------------------------------------------
r_vec <- tau_vec <- se_vec <- c()
S1_vec <- sapply(obs_new, function(t) S1(t, mean = mean_sig,
sd = sd_sig))
(theta <- mean(S1_vec))
se_theta <- sqrt((mean(S1_vec^2) - theta^2)/n)
for (j in 1:length(T_basis)) {
fun_vec <- sapply(obs_new, T_basis[[j]])
r_vec <- c(r_vec, cor(S1_vec, fun_vec))
tau_vec <- c(tau_vec, mean(fun_vec))
se_vec <- c(se_vec, sqrt((mean(fun_vec^2) - mean(fun_vec)^2)/n))
}
# testing \eta = 0:
theta/norm_S
# testing for signal:
(t_stat_theta <- theta/se_theta)
t_stat_theta>qnorm(0.95)
pnorm(t_stat_theta, lower.tail = FALSE)
(theta <- theta*(t_stat_theta>qnorm(0.95)))
corr_test_taus <- abs(r_vec)/sqrt(1-r_vec^2)<qt(0.975, df = n)/sqrt(n)
mask_for_funs <- c(corr_test_taus)
coefs_to_use <- c(tau_vec)*mask_for_funs
df <- data.frame(fun_names = paste0('T',1:5),
coefs = coefs_to_use,
T_stat = c(coefs_to_use/se_vec))
df <- df[order(abs(df$T_stat), decreasing = TRUE),]
df
# ESTIMATED eta: 0.02074792
# Test for eta: null hypothesis (eta = 0) rejected with p-value 0.004746472
source('bases on [l,u] - gb with 2 bumps.R')
library(ggplot2)
xs <- seq(l,u,0.01)
y_sig <- sapply(xs, fs)
y_kde <- sapply(xs, kde)
y_gb <- sapply(xs, gb)
obs_new <- read.csv('test_data.csv', header = TRUE)$x
hs <- hist(obs_new, breaks = 50, probability = TRUE)
basic_plt<- ggplot(mapping = aes(x = obs_new)) +
ylim(0, .5) +
geom_histogram(mapping = aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_kde, color = 'KDE for Mixture'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_gb, color = 'Proposal Background'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_sig, color = 'True Signal'),
lwd = 1.3) +
scale_color_manual(values = c('KDE for Mixture' = 'black',
'Proposal Background' = 'red',
'True Signal' = 'blue')) +
geom_vline(xintercept = c(M_lower, M_upper),
lwd = 1.3, lty = 2, color = 'grey')
basic_plt
#-----------------------------------------------------------------
r_vec <- tau_vec <- se_vec <- c()
S1_vec <- sapply(obs_new, function(t) S1(t, mean = mean_sig,
sd = sd_sig))
(theta <- mean(S1_vec))
se_theta <- sqrt((mean(S1_vec^2) - theta^2)/n)
for (j in 1:length(T_basis)) {
fun_vec <- sapply(obs_new, T_basis[[j]])
r_vec <- c(r_vec, cor(S1_vec, fun_vec))
tau_vec <- c(tau_vec, mean(fun_vec))
se_vec <- c(se_vec, sqrt((mean(fun_vec^2) - mean(fun_vec)^2)/n))
}
# testing \eta = 0:
theta/norm_S
# testing for signal:
(t_stat_theta <- theta/se_theta)
t_stat_theta>qnorm(0.95)
pnorm(t_stat_theta, lower.tail = FALSE)
(theta <- theta*(t_stat_theta>qnorm(0.95)))
corr_test_taus <- abs(r_vec)/sqrt(1-r_vec^2)<qt(0.975, df = n)/sqrt(n)
mask_for_funs <- c(corr_test_taus)
coefs_to_use <- c(tau_vec)*mask_for_funs
df <- data.frame(fun_names = paste0('T',1:5),
coefs = coefs_to_use,
T_stat = c(coefs_to_use/se_vec))
df <- df[order(abs(df$T_stat), decreasing = TRUE),]
df
fun_indices <- as.numeric(sapply(strsplit(df$fun_names, 'T'), function(t) t[2]))
fun_indices <- fun_indices[df$coefs != 0]
taus_for_aic <- c()
for(i in 1:length(fun_indices))
{
vec <- rep(0, length(T_basis))
vec[fun_indices[1:i]] <- 1
taus_for_aic <- rbind(taus_for_aic, vec*tau_vec)
}
aic_vec <- apply(taus_for_aic, 1, function(t){
2*log_lik(data = obs_new, theta = theta,
tau = t) - 2*(sum(t!=0) + (theta != 0))
})
aic_vec <- c(aic_vec, rep(NA, nrow(df) - length(aic_vec)))
df$aic <- aic_vec
custom_order <- df$fun_names
df$fun_names <- factor(df$fun_names,
levels = custom_order)
ggplot(df[complete.cases(df),], aes(x = fun_names, y = aic)) +
geom_point(size = 3, col = 'blue', alpha = 0.5) +
geom_line(mapping = aes(y = aic,
x = 1:length(aic)), lwd = 1.2,
alpha = 0.5)
(final_tau <- taus_for_aic[which.max(df$aic),])
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Signal_Normal - Background_Normal - 2 (delta checking)")
rm(list = ls())
library(ggplot2)
library(kdensity)
library(truncdist)
library(VGAM)
l <- 1; u <- 5
mean_sig <- 3.5; sd_sig <- 0.25
# mean_sig <- 3.5; sd_sig <- 0.15
mean_back <- -0.5; sd_back <- 3.25
# rate_gb <- 0.18
rate_gb <- 0.3
eta_true <- 0.05
fs_prop <- 0.05
eps <- 0.001
fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean, sd = sd))
}
Fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(ptrunc(x, spec = 'norm', a = l, b = u,
mean = mean, sd = sd))
}
f <- function(x)
{
return(eta_true*dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean_sig, sd = sd_sig) + (1-eta_true)*dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean_back,
sd = sd_back))
}
set.seed(12345)
n <- 5e3
back <- rtrunc(n, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
sig <- rtrunc(n, spec = 'norm',
mean = mean_sig, sd = sd_sig,
a = l, b = u)
u_mask <- rbinom(n, size = 1, prob = eta_true)
obs <- ifelse(u_mask, sig, back)
find_d <- function(d)
{
pl <- Fs(mean_sig-d, mean = mean_sig, sd = sd_sig)
pu <- Fs(mean_sig+d, mean = mean_sig, sd = sd_sig)
return(pu-pl-1+eps)
}
sol <- uniroot(find_d, lower = 0, upper = min(mean_sig - l,u - mean_sig))
r <- sol$root
M_lower <- mean_sig - r
M_upper <- mean_sig + r
rm(list = ls())
library(ggplot2)
library(kdensity)
library(truncdist)
library(VGAM)
l <- 1; u <- 5
mean_sig <- 3.5; sd_sig <- 0.25
# mean_sig <- 3.5; sd_sig <- 0.15
mean_back <- -0.5; sd_back <- 3.25
# rate_gb <- 0.18
rate_gb <- 0.3
eta_true <- 0.05
fs_prop <- 0.05
eps <- 0.001
fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean, sd = sd))
}
Fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(ptrunc(x, spec = 'norm', a = l, b = u,
mean = mean, sd = sd))
}
f <- function(x)
{
return(eta_true*dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean_sig, sd = sd_sig) + (1-eta_true)*dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean_back,
sd = sd_back))
}
set.seed(12345)
n <- 5e3
back <- rtrunc(n, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
sig <- rtrunc(n, spec = 'norm',
mean = mean_sig, sd = sd_sig,
a = l, b = u)
u_mask <- rbinom(n, size = 1, prob = eta_true)
obs <- ifelse(u_mask, sig, back)
find_d <- function(d)
{
pl <- Fs(mean_sig-d, mean = mean_sig, sd = sd_sig)
pu <- Fs(mean_sig+d, mean = mean_sig, sd = sd_sig)
return(pu-pl-1+eps)
}
sol <- uniroot(find_d, lower = 0, upper = min(mean_sig - l,u - mean_sig))
r <- sol$root
M_lower <- mean_sig - r
M_upper <- mean_sig + r
# mean_in_gb <- M_lower; sd_in_gb <- sd_sig
mean1_in_gb <- (M_lower + mean_sig)/2; sd_in_gb <- 2*sd_sig
mean2_in_gb <- (M_upper + mean_sig)/2;
lam <- 0.01
temp <- function(b){
mu1_qb <- 1/beta +
(l*exp(-beta*l) - u*exp(-beta*u))/(exp(-beta*l) - exp(-beta*u))
return(lam*(mu1_qb - mu1_fs_star) - (x_bar - mu1_fs_star))
}
uniroot(temp, 0, 2)
uniroot(temp, c(0, 2))
uniroot(temp, c(0.01, 2))
lam <- 0.01
temp <- function(beta){
mu1_qb <- 1/beta +
(l*exp(-beta*l) - u*exp(-beta*u))/(exp(-beta*l) - exp(-beta*u))
return(lam*(mu1_qb - mu1_fs_star) - (x_bar - mu1_fs_star))
}
uniroot(temp, c(0.01, 2))
rm(list = ls())
library(ggplot2)
library(kdensity)
library(truncdist)
library(VGAM)
l <- 1; u <- 5
mean_sig <- 3.5; sd_sig <- 0.25
# mean_sig <- 3.5; sd_sig <- 0.15
mean_back <- -0.5; sd_back <- 3.25
# rate_gb <- 0.18
rate_gb <- 0.3
eta_true <- 0.05
fs_prop <- 0.05
eps <- 0.001
fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean, sd = sd))
}
Fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(ptrunc(x, spec = 'norm', a = l, b = u,
mean = mean, sd = sd))
}
f <- function(x)
{
return(eta_true*dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean_sig, sd = sd_sig) + (1-eta_true)*dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean_back,
sd = sd_back))
}
set.seed(12345)
n <- 5e3
back <- rtrunc(n, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
sig <- rtrunc(n, spec = 'norm',
mean = mean_sig, sd = sd_sig,
a = l, b = u)
u_mask <- rbinom(n, size = 1, prob = eta_true)
obs <- ifelse(u_mask, sig, back)
find_d <- function(d)
{
pl <- Fs(mean_sig-d, mean = mean_sig, sd = sd_sig)
pu <- Fs(mean_sig+d, mean = mean_sig, sd = sd_sig)
return(pu-pl-1+eps)
}
sol <- uniroot(find_d, lower = 0, upper = min(mean_sig - l,u - mean_sig))
r <- sol$root
M_lower <- mean_sig - r
M_upper <- mean_sig + r
# mean_in_gb <- M_lower; sd_in_gb <- sd_sig
mean1_in_gb <- (M_lower + mean_sig)/2; sd_in_gb <- 2*sd_sig
mean2_in_gb <- (M_upper + mean_sig)/2;
x_bar <- mean(obs)
# x_sq_bar <- mean(obs^2)
fs_star <- function(x) {
fs_val_1 <- fs(x, mean = mean1_in_gb, sd = sd_in_gb)
fs_val_2 <- fs(x, mean = mean2_in_gb, sd = sd_in_gb)
return((fs_val_1+fs_val_2)/2)
}
mu1_fs_star <- integrate(function(t) fs_star(t)*t, l, u)$value
lam <- 0.01
temp <- function(beta){
mu1_qb <- 1/beta +
(l*exp(-beta*l) - u*exp(-beta*u))/(exp(-beta*l) - exp(-beta*u))
return(lam*(mu1_qb - mu1_fs_star) - (x_bar - mu1_fs_star))
}
uniroot(temp, c(0.01, 2))
curve(temp)
lam <- 0.01
temp <- function(beta){
mu1_qb <- 1/beta +
(l*exp(-beta*l) - u*exp(-beta*u))/(exp(-beta*l) - exp(-beta*u))
return(lam*(mu1_qb - mu1_fs_star) - (x_bar - mu1_fs_star))
}
curve(temp, 0.01, 10)
lam <- 0.03
temp <- function(beta){
mu1_qb <- 1/beta +
(l*exp(-beta*l) - u*exp(-beta*u))/(exp(-beta*l) - exp(-beta*u))
return(lam*(mu1_qb - mu1_fs_star) - (x_bar - mu1_fs_star))
}
curve(temp, 0.01, 10)
lam <- 0.05
temp <- function(beta){
mu1_qb <- 1/beta +
(l*exp(-beta*l) - u*exp(-beta*u))/(exp(-beta*l) - exp(-beta*u))
return(lam*(mu1_qb - mu1_fs_star) - (x_bar - mu1_fs_star))
}
curve(temp, 0.01, 10)
rm(list = ls())
library(ggplot2)
library(kdensity)
library(truncdist)
library(VGAM)
l <- 1; u <- 5
mean_sig <- 3.5; sd_sig <- 0.25
# mean_sig <- 3.5; sd_sig <- 0.15
mean_back <- -0.5; sd_back <- 3.25
# rate_gb <- 0.18
rate_gb <- 0.3
eta_true <- 0.05
fs_prop <- 0.05
eps <- 0.001
fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean, sd = sd))
}
Fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(ptrunc(x, spec = 'norm', a = l, b = u,
mean = mean, sd = sd))
}
f <- function(x)
{
return(eta_true*dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean_sig, sd = sd_sig) + (1-eta_true)*dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean_back,
sd = sd_back))
}
set.seed(12345)
n <- 5e3
back <- rtrunc(n, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
sig <- rtrunc(n, spec = 'norm',
mean = mean_sig, sd = sd_sig,
a = l, b = u)
u_mask <- rbinom(n, size = 1, prob = eta_true)
obs <- ifelse(u_mask, sig, back)
find_d <- function(d)
{
pl <- Fs(mean_sig-d, mean = mean_sig, sd = sd_sig)
pu <- Fs(mean_sig+d, mean = mean_sig, sd = sd_sig)
return(pu-pl-1+eps)
}
sol <- uniroot(find_d, lower = 0, upper = min(mean_sig - l,u - mean_sig))
r <- sol$root
M_lower <- mean_sig - r
M_upper <- mean_sig + r
# mean_in_gb <- M_lower; sd_in_gb <- sd_sig
mean1_in_gb <- (M_lower + mean_sig)/2; sd_in_gb <- 2*sd_sig
mean2_in_gb <- (M_upper + mean_sig)/2;
x_bar <- mean(obs)
# x_sq_bar <- mean(obs^2)
fs_star <- function(x) {
fs_val_1 <- fs(x, mean = mean1_in_gb, sd = sd_in_gb)
fs_val_2 <- fs(x, mean = mean2_in_gb, sd = sd_in_gb)
return((fs_val_1+fs_val_2)/2)
}
mu1_fs_star <- integrate(function(t) fs_star(t)*t, l, u)$value
lam <- 0.1
temp <- function(beta){
mu1_qb <- 1/beta +
(l*exp(-beta*l) - u*exp(-beta*u))/(exp(-beta*l) - exp(-beta*u))
return(lam*(mu1_qb - mu1_fs_star) - (x_bar - mu1_fs_star))
}
curve(temp, 0.01, 10)
lam <- 0.1
temp <- function(beta){
mu1_qb <- ((1-beta)/(2-beta))*(u^(2-beta) - l^(2-beta))/(u^(1-beta) - l^(1-beta))
return(lam*(mu1_qb - mu1_fs_star) - (x_bar - mu1_fs_star))
}
curve(temp, 0.01, 10)
uniroot(temp, c(0.01, 2))
lam <- 0.5
temp <- function(beta){
mu1_qb <- ((1-beta)/(2-beta))*(u^(2-beta) - l^(2-beta))/(u^(1-beta) - l^(1-beta))
return(lam*(mu1_qb - mu1_fs_star) - (x_bar - mu1_fs_star))
}
curve(temp, 0.01, 10)
uniroot(temp, c(0.01, 2))
uniroot(temp, c(0.01, 10))
lam <- 0.01
temp <- function(beta){
mu1_qb <- ((1-beta)/(2-beta))*(u^(2-beta) - l^(2-beta))/(u^(1-beta) - l^(1-beta))
return(lam*(mu1_qb - mu1_fs_star) - (x_bar - mu1_fs_star))
}
curve(temp, 0.01, 10)
lam <- 0.05
temp <- function(beta){
mu1_qb <- ((1-beta)/(2-beta))*(u^(2-beta) - l^(2-beta))/(u^(1-beta) - l^(1-beta))
return(lam*(mu1_qb - mu1_fs_star) - (x_bar - mu1_fs_star))
}
curve(temp, 0.01, 10)
uniroot(temp, c(0.01, 10))
lam <- 0
temp <- function(beta){
mu1_qb <- ((1-beta)/(2-beta))*(u^(2-beta) - l^(2-beta))/(u^(1-beta) - l^(1-beta))
return(lam*(mu1_qb - mu1_fs_star) - (x_bar - mu1_fs_star))
}
curve(temp, 0.01, 10)
library(devtools)
devtools::install_github(repo = "rohitpatra/mixmodel",ref='main')
library(mixmodel)
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Fake data examples/Data 3")
obs <- read.table('Fake_data.txt')$Data3
obs
length(obs)
est.default <- mix.model(data.1, method = "fixed", gridsize = 600)
est.default <- mix.model(obs, method = "fixed", gridsize = 600)
print(est.default)
est.fixed <- mix.model(obs, method = "fixed",
c.n = .05*log(log(length(obs))),
gridsize = 600)
print(est.fixed)
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Fake data examples/Data 1")
getwd()
# library(devtools)
# devtools::install_github(repo = "rohitpatra/mixmodel",ref='main')
library(mixmodel)
obs <- read.table('Fake_data.txt')$Data1
est.default <- mix.model(obs, method = "fixed", gridsize = 600)
print(est.default) #"Estimate of alp is 0.575"
est.fixed <- mix.model(obs, method = "fixed",
c.n = .05*log(log(length(obs))),
gridsize = 600)
print(est.fixed) #"Estimate of alp is 0.63"
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Fake data examples/Data 2")
# library(devtools)
# devtools::install_github(repo = "rohitpatra/mixmodel",ref='main')
library(mixmodel)
obs <- read.table('Fake_data.txt')$Data2
est.default <- mix.model(obs, method = "fixed", gridsize = 600)
print(est.default) #"Estimate of alp is 0.575"
est.fixed <- mix.model(obs, method = "fixed",
c.n = .05*log(log(length(obs))),
gridsize = 600)
print(est.fixed) #"Estimate of alp is 0.63"
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Fake data examples/Data 4")
# library(devtools)
# devtools::install_github(repo = "rohitpatra/mixmodel",ref='main')
rm(list = ls())
library(mixmodel)
obs <- read.table('Fake_data.txt')$Data4
est.default <- mix.model(obs, method = "fixed", gridsize = 600)
print(est.default) #"Estimate of alp is 0.575"
est.fixed <- mix.model(obs, method = "fixed",
c.n = .05*log(log(length(obs))),
gridsize = 600)
print(est.fixed) #"Estimate of alp is 0.63"
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Fake data examples/Data 5")
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Fake data examples/Data 5")
# library(devtools)
# devtools::install_github(repo = "rohitpatra/mixmodel",ref='main')
rm(list = ls())
library(mixmodel)
obs <- read.table('Fake_data.txt')$Data5
est.default <- mix.model(obs, method = "fixed", gridsize = 600)
print(est.default) #"Estimate of alp is 0.575"
est.fixed <- mix.model(obs, method = "fixed",
c.n = .05*log(log(length(obs))),
gridsize = 600)
print(est.fixed) #"Estimate of alp is 0.63"
