curve(temp_fun, l, u, add = TRUE, col = 'red', lty = 2)
}
as.character(fs_prop_seq)
legend('topright', col = 1:length(fs_prop_seq),
lty = 2, bty = 'n', legend = as.character(fs_prop_seq))
rm(list = ls())
library(ggplot2)
library(kdensity)
library(truncdist)
library(VGAM)
real_l <- 1; real_u <- 35
l <- log(real_l); u <- log(real_u)
mean_sig <- 3.5; sd_sig <- sqrt(0.01*3.5^2)
rate_gb <- 1.2
eps <- 1e-3
dat <- read.table('Data_ex1.txt', header = TRUE)
obs <- log(dat$x)
n <- length(obs)
# SIGNAL DENSITY:
fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(dtrunc(exp(x), spec = 'norm', a = real_l, b = real_u,
mean = mean, sd = sd)*exp(x))
}
# SIGNAL CDF:
Fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(ptrunc(exp(x), spec = 'norm', a = real_l, b = real_u,
mean = mean, sd = sd))
}
# Figuring out (mu_s -d, mu_s + d) that covers an area of 1-eps:
find_d <- function(d)
{
pl <- Fs(log(mean_sig)-d, mean = mean_sig, sd = sd_sig)
pu <- Fs(log(mean_sig)+d, mean = mean_sig, sd = sd_sig)
return(pu-pl-1+eps)
}
sol <- uniroot(find_d, lower = 0, upper = min(log(mean_sig) - l,u - log(mean_sig)))
r <- sol$root
M_lower <- log(mean_sig) - r
M_upper <- log(mean_sig) + r
round(integrate(fs, M_lower, M_upper)$value,5) == 1-eps
# PROPOSAL BACKGROUND DENSITY:
mean1_in_gb <- (exp(M_lower) + mean_sig)/2; sd_in_gb <- 2*sd_sig
mean2_in_gb <- (exp(M_upper) + mean_sig)/2; sd_in_gb <- 2*sd_sig
gb <- function(x, fs_prop = 0.01)
{
fs_val1 <- fs(x, mean = mean1_in_gb, sd = sd_in_gb)
fs_val2 <- fs(x, mean = mean2_in_gb, sd = sd_in_gb)
qb_val <- dtrunc(x, spec = 'exp', rate = rate_gb, a = l, b = u)
return(fs_prop*fs_val1 + fs_prop*fs_val2 + (1-2*fs_prop)*qb_val)
}
# Area under gb
integrate(gb,l,u)
# Function to calculate norm under Gb
calc_norm_gb <- function(fun, ...)
{
integrate(function(t) gb(t)*fun(t,...)^2, l, u)$value |> sqrt()
}
# Convarting fs into S1:
norm_S <- calc_norm_gb(function(t) fs(t, mean= mean_sig, sd = sd_sig)/gb(t) - 1)
S1 <- function(x, ...)
{
f_sig <- fs(x, ...)
g_b <- gb(x)
return((f_sig/g_b -1)/norm_S)
}
kde <- kdensity(obs)
curve(kde, l, u)
fs_prop_seq <- seq(0, 0.05, 0.01)
for(j in fs_prop_seq)
{temp_fun <- function(t) gb(t, fs_prop = j)
curve(temp_fun, l, u, add = TRUE, col = j, lty = 2)
}
legend('topright', col = 1:length(fs_prop_seq),
lty = 2, bty = 'n', legend = as.character(fs_prop_seq))
rm(list = ls())
library(ggplot2)
library(kdensity)
library(truncdist)
library(VGAM)
real_l <- 1; real_u <- 35
l <- log(real_l); u <- log(real_u)
mean_sig <- 3.5; sd_sig <- sqrt(0.01*3.5^2)
rate_gb <- 1.2
eps <- 1e-3
dat <- read.table('Data_ex1.txt', header = TRUE)
obs <- log(dat$x)
n <- length(obs)
# SIGNAL DENSITY:
fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(dtrunc(exp(x), spec = 'norm', a = real_l, b = real_u,
mean = mean, sd = sd)*exp(x))
}
# SIGNAL CDF:
Fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(ptrunc(exp(x), spec = 'norm', a = real_l, b = real_u,
mean = mean, sd = sd))
}
# Figuring out (mu_s -d, mu_s + d) that covers an area of 1-eps:
find_d <- function(d)
{
pl <- Fs(log(mean_sig)-d, mean = mean_sig, sd = sd_sig)
pu <- Fs(log(mean_sig)+d, mean = mean_sig, sd = sd_sig)
return(pu-pl-1+eps)
}
sol <- uniroot(find_d, lower = 0, upper = min(log(mean_sig) - l,u - log(mean_sig)))
r <- sol$root
M_lower <- log(mean_sig) - r
M_upper <- log(mean_sig) + r
round(integrate(fs, M_lower, M_upper)$value,5) == 1-eps
# PROPOSAL BACKGROUND DENSITY:
mean1_in_gb <- (exp(M_lower) + mean_sig)/2; sd_in_gb <- 2*sd_sig
mean2_in_gb <- (exp(M_upper) + mean_sig)/2; sd_in_gb <- 2*sd_sig
gb <- function(x, fs_prop = 0.01)
{
fs_val1 <- fs(x, mean = mean1_in_gb, sd = sd_in_gb)
fs_val2 <- fs(x, mean = mean2_in_gb, sd = sd_in_gb)
qb_val <- dtrunc(x, spec = 'exp', rate = rate_gb, a = l, b = u)
return(fs_prop*fs_val1 + fs_prop*fs_val2 + (1-2*fs_prop)*qb_val)
}
# Area under gb
integrate(gb,l,u)
# Function to calculate norm under Gb
calc_norm_gb <- function(fun, ...)
{
integrate(function(t) gb(t)*fun(t,...)^2, l, u)$value |> sqrt()
}
# Convarting fs into S1:
norm_S <- calc_norm_gb(function(t) fs(t, mean= mean_sig, sd = sd_sig)/gb(t) - 1)
S1 <- function(x, ...)
{
f_sig <- fs(x, ...)
g_b <- gb(x)
return((f_sig/g_b -1)/norm_S)
}
kde <- kdensity(obs)
curve(kde, l, u)
fs_prop_seq <- seq(0, 0.05, 0.01)
for(j in fs_prop_seq)
{temp_fun <- function(t) gb(t, fs_prop = j)
curve(temp_fun, l, u, add = TRUE, col = j, lty = 2)
}
rm(list = ls())
library(ggplot2)
library(kdensity)
library(truncdist)
library(VGAM)
real_l <- 1; real_u <- 35
l <- log(real_l); u <- log(real_u)
mean_sig <- 3.5; sd_sig <- sqrt(0.01*3.5^2)
rate_gb <- 1.2
eps <- 1e-3
dat <- read.table('Data_ex1.txt', header = TRUE)
obs <- log(dat$x)
n <- length(obs)
# SIGNAL DENSITY:
fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(dtrunc(exp(x), spec = 'norm', a = real_l, b = real_u,
mean = mean, sd = sd)*exp(x))
}
# SIGNAL CDF:
Fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(ptrunc(exp(x), spec = 'norm', a = real_l, b = real_u,
mean = mean, sd = sd))
}
# Figuring out (mu_s -d, mu_s + d) that covers an area of 1-eps:
find_d <- function(d)
{
pl <- Fs(log(mean_sig)-d, mean = mean_sig, sd = sd_sig)
pu <- Fs(log(mean_sig)+d, mean = mean_sig, sd = sd_sig)
return(pu-pl-1+eps)
}
sol <- uniroot(find_d, lower = 0, upper = min(log(mean_sig) - l,u - log(mean_sig)))
r <- sol$root
M_lower <- log(mean_sig) - r
M_upper <- log(mean_sig) + r
round(integrate(fs, M_lower, M_upper)$value,5) == 1-eps
# PROPOSAL BACKGROUND DENSITY:
mean1_in_gb <- (exp(M_lower) + mean_sig)/2; sd_in_gb <- 2*sd_sig
mean2_in_gb <- (exp(M_upper) + mean_sig)/2; sd_in_gb <- 2*sd_sig
gb <- function(x, fs_prop = 0.01)
{
fs_val1 <- fs(x, mean = mean1_in_gb, sd = sd_in_gb)
fs_val2 <- fs(x, mean = mean2_in_gb, sd = sd_in_gb)
qb_val <- dtrunc(x, spec = 'exp', rate = rate_gb, a = l, b = u)
return(fs_prop*fs_val1 + fs_prop*fs_val2 + (1-2*fs_prop)*qb_val)
}
# Area under gb
integrate(gb,l,u)
# Function to calculate norm under Gb
calc_norm_gb <- function(fun, ...)
{
integrate(function(t) gb(t)*fun(t,...)^2, l, u)$value |> sqrt()
}
# Convarting fs into S1:
norm_S <- calc_norm_gb(function(t) fs(t, mean= mean_sig, sd = sd_sig)/gb(t) - 1)
S1 <- function(x, ...)
{
f_sig <- fs(x, ...)
g_b <- gb(x)
return((f_sig/g_b -1)/norm_S)
}
kde <- kdensity(obs)
curve(kde, l, u)
fs_prop_seq <- seq(0, 0.05, 0.01)
for(j in 1:length(fs_prop_seq))
{temp_fun <- function(t) gb(t, fs_prop = fs_prop_seq[j])
curve(temp_fun, l, u, add = TRUE, col = j, lty = 2)
}
legend('topright', col = 1:length(fs_prop_seq),
lty = 2, bty = 'n', legend = as.character(fs_prop_seq))
library(ggplot2)
source('bases on [l,u] - gb with 2 bumps.R')
dat <- read.table('Data_ex1.txt', header = TRUE)
obs <- log(dat$x)
n <- length(obs)
xs <- seq(l, u, length.out = 1e3)
y_sig <- sapply(xs, fs)
y_gb <- sapply(xs, gb)
kde <- kdensity::kdensity(obs)
hs <- hist(obs, probability = TRUE, breaks = 50)
basic_plt <- ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(aes(x = xs, y = y_gb), col = 'red',
lwd = 1.2, alpha = 0.5) +
geom_line(aes(x = xs, y = kde(xs)), col = 'yellow',
lwd = 1.2, alpha = 0.5) +
geom_vline(xintercept = c(log(mean_sig), M_lower, M_upper),
col = c('black', 'blue', 'blue'),
lty = 2, lwd = 1.2, alpha = 0.5)
basic_plt
#-----------------------------------------------------------------
r_vec <- tau_vec <- se_vec <- c()
S1_vec <- sapply(obs, function(t) S1(t, mean = mean_sig,
sd = sd_sig))
(theta <- mean(S1_vec))
se_theta <- sqrt((mean(S1_vec^2) - theta^2)/n)
# testing \eta = 0:
theta/norm_S
# testing for signal:
(t_stat_theta <- theta/se_theta)
pnorm(t_stat_theta, lower.tail = FALSE)
t_stat_theta>qnorm(0.95)
# (theta <- theta*(t_stat_theta>qnorm(0.95)))
for (j in 1:length(T_basis)) {
fun_vec <- sapply(obs, T_basis[[j]])
r_vec <- c(r_vec, cor(S1_vec, fun_vec))
tau_vec <- c(tau_vec, mean(fun_vec))
se_vec <- c(se_vec, sqrt((mean(fun_vec^2) - mean(fun_vec)^2)/n))
}
corr_test_taus <- abs(r_vec)/sqrt(1-r_vec^2)<qt(0.975, df = n)/sqrt(n)
mask_for_funs <- c(corr_test_taus)
coefs_to_use <- c(tau_vec)*mask_for_funs
df <- data.frame(fun_names = paste0('T',1:5),
coefs = coefs_to_use,
T_stat = c(coefs_to_use/se_vec))
df <- df[order(abs(df$T_stat), decreasing = TRUE),]
df
fun_indices <- as.numeric(sapply(strsplit(df$fun_names, 'T'), function(t) t[2]))
fun_indices <- fun_indices[df$coefs != 0]
taus_for_aic <- c()
for(i in 1:length(fun_indices))
{
vec <- rep(0, length(T_basis))
vec[fun_indices[1:i]] <- 1
taus_for_aic <- rbind(taus_for_aic, vec*tau_vec)
}
aic_vec <- apply(taus_for_aic, 1, function(t){
2*log_lik(data = obs, theta = theta,
tau = t) - 2*sum(t!=0)
})
aic_vec <- c(aic_vec, rep(NA, nrow(df) - length(aic_vec)))
df$aic <- aic_vec
custom_order <- df$fun_names
df$fun_names <- factor(df$fun_names,
levels = custom_order)
ggplot(df[complete.cases(df),], aes(x = fun_names, y = aic)) +
geom_point(size = 3, col = 'blue', alpha = 0.5) +
geom_line(mapping = aes(y = aic,
x = 1:length(aic)), lwd = 1.2,
alpha = 0.5)
final_tau <- taus_for_aic[which.max(df$aic),]
res <- sapply(xs, function(t) mod(t, theta = theta, tau = final_tau))
fitted_plot_plugins <- ggplot(mapping = aes(x = obs)) + geom_histogram(mapping =
aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = gb(xs), color = 'Proposal Background'),
lwd = 1.3, alpha = 0.8) +
geom_line(mapping = aes(x = xs, y = as.numeric(res[1,]), color = 'Fitted Mixture'),
linetype = 'dashed', lwd = 1.3, alpha = 0.8) +
geom_line(mapping = aes(x = xs, y = as.numeric(res[2,]), color = 'Fitted Background from Mixture'),
linetype = 'dashed', lwd = 1.3, alpha = 0.8) +
geom_line(aes(x = xs, y = kde(xs), color = 'KDE for mixture'),
lwd = 1.2, alpha = 0.8) +
scale_color_manual(values = c('Proposal Background' = 'red',
'Fitted Mixture' = 'cyan',
'Fitted Background from Mixture' = 'skyblue',
'KDE for mixture' = 'yellow'))
fitted_plot_plugins
theta/norm_S
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Fake data examples/Data 1")
dat <- read.table('Fake_data.txt')
View(dat)
dat <- read.table('Fake_data.txt')
obs <- dat$Data1
l <- 0; u <- 1.5
eps <- 1e-3
hs <- hist(obs, probability = TRUE, breaks = 50)
ggplot(data = data.frame(x = obs)) +
geom_histogram(aes(y = after_stat(density)),
breaks = hs$breaks,
fill = 'steelblue', col = 'black')
ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(density)),
breaks = hs$breaks,
fill = 'steelblue', col = 'black')
ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(density)),
breaks = hs$breaks,
fill = 'steelblue', col = 'black') +
stat_function(fun = fs, col = 'blue', alpha = 0.5) +
ylim(c(0,1.75))
dat <- read.table('Fake_data.txt')
obs <- dat$Data1
l <- 0; u <- 1.5
eps <- 1e-3
fs <- function(x)
{
dtrunc(x, mean = 0.6, sd = 0.03, spec = 'norm',
a = l, b = u)
}
hs <- hist(obs, probability = TRUE, breaks = 50)
ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(density)),
breaks = hs$breaks,
fill = 'steelblue', col = 'black') +
stat_function(fun = fs, col = 'blue', alpha = 0.5) +
ylim(c(0,1.75))
dat <- read.table('Fake_data.txt')
obs <- dat$Data1
l <- 0; u <- 1.5
eps <- 1e-3
fs <- function(x)
{
dtrunc(x, mean = 0.6, sd = 0.03, spec = 'norm',
a = l, b = u)
}
hs <- hist(obs, probability = TRUE, breaks = 50)
ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(density)),
breaks = hs$breaks,
fill = 'steelblue', col = 'black')
dat <- read.table('Fake_data.txt')
obs <- dat$Data1
l <- 0; u <- 1.5
eps <- 1e-3
fs <- function(x)
{
dtrunc(x, mean = 0.6, sd = 0.03, spec = 'norm',
a = l, b = u)
}
hs <- hist(obs, probability = TRUE, breaks = 50)
ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(density)),
breaks = hs$breaks,
fill = 'steelblue', col = 'black') +
stat_function(fun = fs)
?stat_function
ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(density)),
breaks = hs$breaks,
fill = 'steelblue', col = 'black') +
geom_function(fun = fs)
dat <- read.table('Fake_data.txt')
obs <- dat$Data1
l <- 0; u <- 1.5
eps <- 1e-3
fs <- function(x)
{
dtrunc(x, mean = 0.6, sd = 0.03, spec = 'norm',
a = l, b = u)
}
hs <- hist(obs, probability = TRUE, breaks = 50)
ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(density)),
breaks = hs$breaks,
fill = 'steelblue', col = 'black')
ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(density)),
breaks = hs$breaks,
fill = 'steelblue', col = 'black') +
stat_function(fun = fs)
ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(..density..)),
breaks = hs$breaks,
fill = 'steelblue', col = 'black') +
stat_function(fun = fs)
?stat_function
ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(..density..)),
breaks = hs$breaks,
fill = 'steelblue', col = 'black') +
stat_function(mapping = aes(x = c(l,u)), fun = fs)
ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = ..density..), fill = 'steelblue', col = 'black') +
stat_function(fun = fs)
ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(density)), fill = 'steelblue', col = 'black') +
stat_function(fun = fs)
ggplot(mapping = aes(x = c(l,u))) +
stat_function(fun = kde)
kde <- kdensity::kdensity(obs)
ggplot(mapping = aes(x = c(l,u))) +
stat_function(fun = kde)
ggplot(data=data.fram(x = c(l,u)), mapping = aes(x = x)) +
stat_function(fun = kde)
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
stat_function(fun = kde)
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
stat_function(fun = kde) +
stat_function(fun = fs)
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
stat_function(fun = kde) +
stat_function(fun = fs) +
ylim(c(0,1.75))
dat <- read.table('Fake_data.txt')
obs <- dat$Data1
l <- 0; u <- 1.5
eps <- 1e-3
fs <- function(x)
{
dtrunc(x, mean = 0.6, sd = 0.03, spec = 'norm',
a = l, b = u)
}
hs <- hist(obs, probability = TRUE, breaks = 50)
ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(..density..)),
breaks = hs$breaks,
fill = 'steelblue', col = 'black')
kde <- kdensity::kdensity(obs)
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
ylim(c(0,1.75)) +
stat_function(fun = kde) +
stat_function(fun = fs)
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
ylim(c(0,1)) +
stat_function(fun = kde) +
stat_function(fun = fs)
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
stat_function(fun = kde)
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
ylim(0,2) +
stat_function(fun = kde) +
stat_function(fun = fs)
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
ylim(0,1.75) +
stat_function(fun = kde) +
stat_function(fun = fs)
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
ylim(0, 1.5) +
stat_function(fun = kde) +
stat_function(fun = fs)
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
ylim(0, 2) +
stat_function(fun = kde) +
stat_function(fun = fs)
dat <- read.table('Fake_data.txt')
obs <- dat$Data1
l <- 0; u <- 1.5
eps <- 1e-3
fs <- function(x)
{
dtrunc(x, mean = 0.6, sd = 0.03, spec = 'norm',
a = l, b = u)
}
hs <- hist(obs, probability = TRUE, breaks = 50)
ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(..density..)),
breaks = hs$breaks,
fill = 'steelblue', col = 'black')
kde <- kdensity::kdensity(obs)
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
ylim(0, 1.8) +
stat_function(fun = kde) +
stat_function(fun = fs)
dat <- read.table('Fake_data.txt')
obs <- dat$Data1
l <- 0; u <- 1.5
eps <- 1e-3
fs <- function(x)
{
dtrunc(x, mean = 0.6, sd = 0.03, spec = 'norm',
a = l, b = u)
}
hs <- hist(obs, probability = TRUE, breaks = 50)
ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(..density..)),
breaks = hs$breaks,
fill = 'steelblue', col = 'black')
kde <- kdensity::kdensity(obs)
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
ylim(0, 1.8) +
stat_function(fun = kde, col = 'orange') +
stat_function(fun = fs, col = 'blue')
