mean = mean, sd = sd))
}
fb <- function(x)
{
dtrunc(x, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
}
Fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(ptrunc(x, spec = 'norm', a = l, b = u,
mean = mean, sd = sd))
}
f <- function(x)
{
return(eta_true*dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean_sig, sd = sd_sig) + (1-eta_true)*dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean_back,
sd = sd_back))
}
set.seed(12345)
n <- 5e3
back <- rtrunc(n, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
sig <- rtrunc(n, spec = 'norm',
mean = mean_sig, sd = sd_sig,
a = l, b = u)
u_mask <- rbinom(n, size = 1, prob = eta_true)
obs <- ifelse(u_mask, sig, back)
find_d <- function(d)
{
pl <- Fs(mean_sig-d, mean = mean_sig, sd = sd_sig)
pu <- Fs(mean_sig+d, mean = mean_sig, sd = sd_sig)
return(pu-pl-1+eps)
}
sol <- uniroot(find_d, lower = 0, upper = min(mean_sig - l,u - mean_sig))
r <- sol$root
d <- seq(0, min(mean_sig - l,u - mean_sig),0.001)
vals <- sapply(d, find_d)
plot(x = d, y = vals, type = 'l')
abline(v = r, h=0, col = 'red', lty = 2)
M_lower <- mean_sig - r
M_upper <- mean_sig + r
# mean_in_gb <- M_lower; sd_in_gb <- sd_sig
mean_in_gb <- (M_lower + mean_sig)/2; sd_in_gb <- 3*sd_sig
gb <- function(x)
{
fs_val <- fs(x, mean = mean_in_gb, sd = sd_in_gb)
# fs_val <- dtrunc(x, location = mean_in_gb, scale = sd_in_gb,
# spec = 'cauchy', l,u)
gb_val <- dtrunc(x, spec = 'exp', rate = rate_gb, a = l, b = u)
return(fs_prop*fs_val + (1-fs_prop)*gb_val)
}
Gb <- function(x)
{
Fs_val <- Fs(x, mean = mean_in_gb, sd = sd_in_gb)
# Fs_val <- ptrunc(x, location = mean_in_gb, scale = sd_in_gb,
# spec = 'cauchy', l,u)
Qb_val <- ptrunc(x, spec = 'exp', rate = rate_gb, a = l, b = u)
return(fs_prop*Fs_val + (1-fs_prop)*Qb_val)
}
calc_norm_gb <- function(fun, ...)
{
integrate(function(t) gb(t)*fun(t,...)^2, l, u)$value |> sqrt()
}
norm_S <- calc_norm_gb(function(t) fs(t, mean= mean_sig, sd = sd_sig)/gb(t) - 1)
S1 <- function(x, ...)
{
f_sig <- fs(x, ...)
g_b <- gb(x)
return((f_sig/g_b -1)/norm_S)
}
# kde <- kdensity::kdensity(obs)
emp_cdf <- ecdf(obs)
curve(gb, l, u, col = 'red', lwd = 2, ylim = c(0,0.5))
# curve(kde, l, u, col = 'pink',add = TRUE, lwd = 2)
curve(f, l, u, col = 'blue', add = TRUE, lwd = 2, lty = 2)
curve(fb, l, u, col = 'brown', add = TRUE, lwd = 2, lty = 2)
legend('topright', legend = c('gb', 'true f', 'true fb'),
col = c('red', 'blue', 'brown'), lwd = 2)
abline(v = c(M_lower, M_upper))
curve(Gb, l, u, lwd = 2, col = 'red')
curve(emp_cdf,l,u, col = 'blue', add = TRUE, lwd = 2)
legend('bottomright', legend = c('Gb','empirical F'),
col = c('red', 'blue'), lwd = 2)
abline(v = c(M_lower))
# checking if delta < 0:
integrate(function(t) S1(t, mean = mean_sig,
sd = sd_sig)*fb(t),
lower = l, upper = u)$value
fb_by_gb <- function(t) fb(t)/gb(t)
xs <- seq(l,u,0.001)
sup_in_M <- max(sapply(xs[xs<M_upper & xs>M_lower], fb_by_gb))
sup_out_M <- max(sapply(xs[xs>M_upper | xs<M_lower], fb_by_gb))
curve(fb_by_gb, l, u)
abline(v = c(M_lower, M_upper), h = sup_in_M, lty = 2)
(1-eps)*sup_in_M
eps*sup_out_M
# testing for signal:
S1_vec <- sapply(obs, function(t) S1(t, mean = mean_sig,
sd = sd_sig))
(theta <- mean(S1_vec))
theta/norm_S
(se_theta <- sqrt((mean(S1_vec^2) - theta^2)/n))
(t_stat <- theta/se_theta)
t_stat>qnorm(0.95)
rm(list = ls())
library(ggplot2)
library(kdensity)
library(truncdist)
library(VGAM)
l <- 1; u <- 5
mean_sig <- 3.5; sd_sig <- 0.25
# mean_sig <- 3.5; sd_sig <- 0.15
mean_back <- -0.5; sd_back <- 3.25
# rate_gb <- 0.18
rate_gb <- 0.3
eta_true <- 0.05
# fs_prop <- 0.01
fs_prop <- 0.05
eps <- 0.001
fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean, sd = sd))
}
fb <- function(x)
{
dtrunc(x, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
}
Fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(ptrunc(x, spec = 'norm', a = l, b = u,
mean = mean, sd = sd))
}
f <- function(x)
{
return(eta_true*dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean_sig, sd = sd_sig) + (1-eta_true)*dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean_back,
sd = sd_back))
}
set.seed(12345)
n <- 5e3
back <- rtrunc(n, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
sig <- rtrunc(n, spec = 'norm',
mean = mean_sig, sd = sd_sig,
a = l, b = u)
u_mask <- rbinom(n, size = 1, prob = eta_true)
obs <- ifelse(u_mask, sig, back)
find_d <- function(d)
{
pl <- Fs(mean_sig-d, mean = mean_sig, sd = sd_sig)
pu <- Fs(mean_sig+d, mean = mean_sig, sd = sd_sig)
return(pu-pl-1+eps)
}
sol <- uniroot(find_d, lower = 0, upper = min(mean_sig - l,u - mean_sig))
r <- sol$root
d <- seq(0, min(mean_sig - l,u - mean_sig),0.001)
vals <- sapply(d, find_d)
plot(x = d, y = vals, type = 'l')
abline(v = r, h=0, col = 'red', lty = 2)
M_lower <- mean_sig - r
M_upper <- mean_sig + r
# mean_in_gb <- M_lower; sd_in_gb <- sd_sig
mean_in_gb <- (M_lower + mean_sig)/2; sd_in_gb <- 3*sd_sig
gb <- function(x)
{
fs_val <- fs(x, mean = mean_in_gb, sd = sd_in_gb)
# fs_val <- dtrunc(x, location = mean_in_gb, scale = sd_in_gb,
# spec = 'cauchy', l,u)
gb_val <- dtrunc(x, spec = 'exp', rate = rate_gb, a = l, b = u)
return(fs_prop*fs_val + (1-fs_prop)*gb_val)
}
Gb <- function(x)
{
Fs_val <- Fs(x, mean = mean_in_gb, sd = sd_in_gb)
# Fs_val <- ptrunc(x, location = mean_in_gb, scale = sd_in_gb,
# spec = 'cauchy', l,u)
Qb_val <- ptrunc(x, spec = 'exp', rate = rate_gb, a = l, b = u)
return(fs_prop*Fs_val + (1-fs_prop)*Qb_val)
}
calc_norm_gb <- function(fun, ...)
{
integrate(function(t) gb(t)*fun(t,...)^2, l, u)$value |> sqrt()
}
norm_S <- calc_norm_gb(function(t) fs(t, mean= mean_sig, sd = sd_sig)/gb(t) - 1)
S1 <- function(x, ...)
{
f_sig <- fs(x, ...)
g_b <- gb(x)
return((f_sig/g_b -1)/norm_S)
}
# kde <- kdensity::kdensity(obs)
emp_cdf <- ecdf(obs)
curve(gb, l, u, col = 'red', lwd = 2, ylim = c(0,0.5))
# curve(kde, l, u, col = 'pink',add = TRUE, lwd = 2)
curve(f, l, u, col = 'blue', add = TRUE, lwd = 2, lty = 2)
curve(fb, l, u, col = 'brown', add = TRUE, lwd = 2, lty = 2)
legend('topright', legend = c('gb', 'true f', 'true fb'),
col = c('red', 'blue', 'brown'), lwd = 2)
abline(v = c(M_lower, M_upper))
curve(Gb, l, u, lwd = 2, col = 'red')
curve(emp_cdf,l,u, col = 'blue', add = TRUE, lwd = 2)
legend('bottomright', legend = c('Gb','empirical F'),
col = c('red', 'blue'), lwd = 2)
abline(v = c(M_lower))
# checking if delta < 0:
integrate(function(t) S1(t, mean = mean_sig,
sd = sd_sig)*fb(t),
lower = l, upper = u)$value
fb_by_gb <- function(t) fb(t)/gb(t)
xs <- seq(l,u,0.001)
sup_in_M <- max(sapply(xs[xs<M_upper & xs>M_lower], fb_by_gb))
sup_out_M <- max(sapply(xs[xs>M_upper | xs<M_lower], fb_by_gb))
curve(fb_by_gb, l, u)
abline(v = c(M_lower, M_upper), h = sup_in_M, lty = 2)
(1-eps)*sup_in_M
eps*sup_out_M
# testing for signal:
S1_vec <- sapply(obs, function(t) S1(t, mean = mean_sig,
sd = sd_sig))
(theta <- mean(S1_vec))
theta/norm_S
(se_theta <- sqrt((mean(S1_vec^2) - theta^2)/n))
(t_stat <- theta/se_theta)
t_stat>qnorm(0.95)
rm(list = ls())
library(ggplot2)
library(kdensity)
library(truncdist)
library(VGAM)
l <- 1; u <- 5
mean_sig <- 3.5; sd_sig <- 0.25
# mean_sig <- 3.5; sd_sig <- 0.15
mean_back <- -0.5; sd_back <- 3.25
# rate_gb <- 0.18
rate_gb <- 0.3
eta_true <- 0.05
# fs_prop <- 0.01
fs_prop <- 0.05
eps <- 0.001
fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean, sd = sd))
}
fb <- function(x)
{
dtrunc(x, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
}
Fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(ptrunc(x, spec = 'norm', a = l, b = u,
mean = mean, sd = sd))
}
f <- function(x)
{
return(eta_true*dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean_sig, sd = sd_sig) + (1-eta_true)*dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean_back,
sd = sd_back))
}
set.seed(12345)
n <- 5e3
back <- rtrunc(n, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
sig <- rtrunc(n, spec = 'norm',
mean = mean_sig, sd = sd_sig,
a = l, b = u)
u_mask <- rbinom(n, size = 1, prob = eta_true)
obs <- ifelse(u_mask, sig, back)
find_d <- function(d)
{
pl <- Fs(mean_sig-d, mean = mean_sig, sd = sd_sig)
pu <- Fs(mean_sig+d, mean = mean_sig, sd = sd_sig)
return(pu-pl-1+eps)
}
sol <- uniroot(find_d, lower = 0, upper = min(mean_sig - l,u - mean_sig))
r <- sol$root
d <- seq(0, min(mean_sig - l,u - mean_sig),0.001)
vals <- sapply(d, find_d)
plot(x = d, y = vals, type = 'l')
abline(v = r, h=0, col = 'red', lty = 2)
M_lower <- mean_sig - r
M_upper <- mean_sig + r
# mean_in_gb <- M_lower; sd_in_gb <- sd_sig
mean_in_gb <- mean_sig; sd_in_gb <- 2*sd_sig
gb <- function(x)
{
fs_val <- fs(x, mean = mean_in_gb, sd = sd_in_gb)
# fs_val <- dtrunc(x, location = mean_in_gb, scale = sd_in_gb,
# spec = 'cauchy', l,u)
gb_val <- dtrunc(x, spec = 'exp', rate = rate_gb, a = l, b = u)
return(fs_prop*fs_val + (1-fs_prop)*gb_val)
}
Gb <- function(x)
{
Fs_val <- Fs(x, mean = mean_in_gb, sd = sd_in_gb)
# Fs_val <- ptrunc(x, location = mean_in_gb, scale = sd_in_gb,
# spec = 'cauchy', l,u)
Qb_val <- ptrunc(x, spec = 'exp', rate = rate_gb, a = l, b = u)
return(fs_prop*Fs_val + (1-fs_prop)*Qb_val)
}
calc_norm_gb <- function(fun, ...)
{
integrate(function(t) gb(t)*fun(t,...)^2, l, u)$value |> sqrt()
}
norm_S <- calc_norm_gb(function(t) fs(t, mean= mean_sig, sd = sd_sig)/gb(t) - 1)
S1 <- function(x, ...)
{
f_sig <- fs(x, ...)
g_b <- gb(x)
return((f_sig/g_b -1)/norm_S)
}
# kde <- kdensity::kdensity(obs)
emp_cdf <- ecdf(obs)
curve(gb, l, u, col = 'red', lwd = 2, ylim = c(0,0.5))
# curve(kde, l, u, col = 'pink',add = TRUE, lwd = 2)
curve(f, l, u, col = 'blue', add = TRUE, lwd = 2, lty = 2)
curve(fb, l, u, col = 'brown', add = TRUE, lwd = 2, lty = 2)
legend('topright', legend = c('gb', 'true f', 'true fb'),
col = c('red', 'blue', 'brown'), lwd = 2)
abline(v = c(M_lower, M_upper))
curve(Gb, l, u, lwd = 2, col = 'red')
curve(emp_cdf,l,u, col = 'blue', add = TRUE, lwd = 2)
legend('bottomright', legend = c('Gb','empirical F'),
col = c('red', 'blue'), lwd = 2)
abline(v = c(M_lower))
# checking if delta < 0:
integrate(function(t) S1(t, mean = mean_sig,
sd = sd_sig)*fb(t),
lower = l, upper = u)$value
fb_by_gb <- function(t) fb(t)/gb(t)
xs <- seq(l,u,0.001)
sup_in_M <- max(sapply(xs[xs<M_upper & xs>M_lower], fb_by_gb))
sup_out_M <- max(sapply(xs[xs>M_upper | xs<M_lower], fb_by_gb))
curve(fb_by_gb, l, u)
abline(v = c(M_lower, M_upper), h = sup_in_M, lty = 2)
(1-eps)*sup_in_M
eps*sup_out_M
# testing for signal:
S1_vec <- sapply(obs, function(t) S1(t, mean = mean_sig,
sd = sd_sig))
(theta <- mean(S1_vec))
theta/norm_S
(se_theta <- sqrt((mean(S1_vec^2) - theta^2)/n))
(t_stat <- theta/se_theta)
t_stat>qnorm(0.95)
pnorm(0.35)
1-pnorm(0.99)
1-pnorm(-0.99)
qnorm(0.9)
1-184/409
65/409
28/65
dbinom(2, size = 8, prob = 0.6)
choose(8,2) * (0.6 ^ 2) * (0.4 ^ 6)
sqrt(0.24/0.5)
sqrt(0.24/0.12)
sqrt(0.24/0.012)
sqrt(20)
140+120+60+110+106+70+50
140+120+60+110+106+70+50+110
140+120+60+110+106+70+50+110+140
install.packages('EQL')
?EQL::hermite()
library(EQL)
hermite(5, n=1:5)
integrate(function(t) hermite(t,1)*hermite(t,2))
integrate(function(t) hermite(t,1)*hermite(t,2), lower = -Inf, upper = Inf)
integrate(function(t) hermite(t,1)*hermite(t,4), lower = -Inf, upper = Inf)
qnorm(0.99)
0.45*0.55
qt(0.975,df= 58)
qt(0.025,df= 58)
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Fake data examples/Data 5")
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Fake data examples/Data 1")
source('bases on [l,u] - gb with 2 bumps.R')
library(ggplot2)
xs <- seq(l,u,0.01)
y_sig <- sapply(xs, fs)
y_kde <- sapply(xs, kde)
y_gb <- sapply(xs, gb)
hs <- hist(obs, breaks = 50, probability = TRUE)
basic_plt<- ggplot(mapping = aes(x = obs)) +
ylim(0, 1.5) +
geom_histogram(mapping = aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_kde, color = 'KDE for Mixture'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_gb, color = 'Proposal Background'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_sig, color = 'True Signal'),
lwd = 1.3) +
scale_color_manual(values = c('KDE for Mixture' = 'black',
'Proposal Background' = 'red',
'True Signal' = 'blue')) +
geom_vline(xintercept = c(M_lower, M_upper),
lwd = 1.3, lty = 2, color = 'grey')
basic_plt
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Fake data examples/Data 5")
source('bases on [l,u] - gb with 2 bumps.R')
library(ggplot2)
xs <- seq(l,u,0.01)
y_sig <- sapply(xs, fs)
y_kde <- sapply(xs, kde)
y_gb <- sapply(xs, gb)
hs <- hist(obs, breaks = 50, probability = TRUE)
basic_plt<- ggplot(mapping = aes(x = obs)) +
ylim(0, 1.5) +
geom_histogram(mapping = aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_kde, color = 'KDE for Mixture'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_gb, color = 'Proposal Background'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_sig, color = 'True Signal'),
lwd = 1.3) +
scale_color_manual(values = c('KDE for Mixture' = 'black',
'Proposal Background' = 'red',
'True Signal' = 'blue')) +
geom_vline(xintercept = c(M_lower, M_upper),
lwd = 1.3, lty = 2, color = 'grey')
basic_plt
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Fake data examples/Data 2")
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Fake data examples/Data 2")
source('bases on [l,u] - gb with 2 bumps.R')
library(ggplot2)
xs <- seq(l,u,0.01)
y_sig <- sapply(xs, fs)
y_kde <- sapply(xs, kde)
y_gb <- sapply(xs, gb)
hs <- hist(obs, breaks = 50, probability = TRUE)
basic_plt<- ggplot(mapping = aes(x = obs)) +
ylim(0, 1.5) +
geom_histogram(mapping = aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_kde, color = 'KDE for Mixture'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_gb, color = 'Proposal Background'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_sig, color = 'True Signal'),
lwd = 1.3) +
scale_color_manual(values = c('KDE for Mixture' = 'black',
'Proposal Background' = 'red',
'True Signal' = 'blue')) +
geom_vline(xintercept = c(M_lower, M_upper),
lwd = 1.3, lty = 2, color = 'grey')
basic_plt
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Fake data examples/Data 3")
source('bases on [l,u] - gb with 2 bumps.R')
library(ggplot2)
xs <- seq(l,u,0.01)
y_sig <- sapply(xs, fs)
y_kde <- sapply(xs, kde)
y_gb <- sapply(xs, gb)
hs <- hist(obs, breaks = 50, probability = TRUE)
basic_plt<- ggplot(mapping = aes(x = obs)) +
ylim(0, 1.5) +
geom_histogram(mapping = aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_kde, color = 'KDE for Mixture'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_gb, color = 'Proposal Background'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_sig, color = 'True Signal'),
lwd = 1.3) +
scale_color_manual(values = c('KDE for Mixture' = 'black',
'Proposal Background' = 'red',
'True Signal' = 'blue')) +
geom_vline(xintercept = c(M_lower, M_upper),
lwd = 1.3, lty = 2, color = 'grey')
basic_plt
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Fake data examples/Data 4")
source('bases on [l,u] - gb with 2 bumps.R')
library(ggplot2)
xs <- seq(l,u,0.01)
y_sig <- sapply(xs, fs)
y_kde <- sapply(xs, kde)
y_gb <- sapply(xs, gb)
hs <- hist(obs, breaks = 50, probability = TRUE)
basic_plt<- ggplot(mapping = aes(x = obs)) +
ylim(0, 1.5) +
geom_histogram(mapping = aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_kde, color = 'KDE for Mixture'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_gb, color = 'Proposal Background'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_sig, color = 'True Signal'),
lwd = 1.3) +
scale_color_manual(values = c('KDE for Mixture' = 'black',
'Proposal Background' = 'red',
'True Signal' = 'blue')) +
geom_vline(xintercept = c(M_lower, M_upper),
lwd = 1.3, lty = 2, color = 'grey')
basic_plt
getwd()
