stat_function(fun = fb, aes(linetype = 'true background'), size = 1) +
stat_function(fun = f_mix, aes(linetype = 'true mixture'), size = 1) +
stat_function(fun = gb, aes(linetype = 'proposed background'), size = 1) +
scale_linetype_manual('', values = c('true background' = 2,
'true mixture' = 1,
'proposed background' = 4))+
geom_vline(xintercept = c(M_lower, M_upper), alpha = 0.3) +
ylab('') + xlab('') +
annotate('text', x = c(M_lower, M_upper),
y = c(0,0),
label = c(TeX('$\\mu-d_\\epsilon$'), TeX('$\\mu_s+d_\\epsilon$')),
size = 10) +
theme_bw() + My_Theme
My_Theme = theme(
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.text=element_text(size= 12))
ggplot(data.frame(x = c(l,u)), aes(x)) +
stat_function(fun = fb, aes(linetype = 'true background'), size = 1) +
stat_function(fun = f_mix, aes(linetype = 'true mixture'), size = 1) +
stat_function(fun = gb, aes(linetype = 'proposed background'), size = 1) +
scale_linetype_manual('', values = c('true background' = 2,
'true mixture' = 1,
'proposed background' = 4))+
geom_vline(xintercept = c(M_lower, M_upper), alpha = 0.3) +
ylab('') + xlab('') +
annotate('text', x = c(M_lower, M_upper),
y = c(0,0),
label = c(TeX('$\\mu-d_\\epsilon$'), TeX('$\\mu_s+d_\\epsilon$')),
size = 10) +
theme_bw() + My_Theme
My_Theme = theme(
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.text=element_text(size= 12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(data.frame(x = c(l,u)), aes(x)) +
stat_function(fun = fb, aes(linetype = 'true background'), size = 1) +
stat_function(fun = f_mix, aes(linetype = 'true mixture'), size = 1) +
stat_function(fun = gb, aes(linetype = 'proposed background'), size = 1) +
scale_linetype_manual('', values = c('true background' = 2,
'true mixture' = 1,
'proposed background' = 4))+
geom_vline(xintercept = c(M_lower, M_upper), alpha = 0.5,
lwd = 1.5) +
ylab('') + xlab('') +
annotate('text', x = c(M_lower, M_upper),
y = c(0,0),
label = c(TeX('$\\mu-d_\\epsilon$'), TeX('$\\mu_s+d_\\epsilon$')),
size = 10) +
theme_bw() + My_Theme
My_Theme = theme(
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.text=element_text(size= 12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(data.frame(x = c(l,u)), aes(x)) +
stat_function(fun = fb, aes(linetype = 'true background'), size = 1) +
stat_function(fun = f_mix, aes(linetype = 'true mixture'), size = 1) +
stat_function(fun = gb, aes(linetype = 'proposed background'), size = 1) +
scale_linetype_manual('', values = c('true background' = 2,
'true mixture' = 1,
'proposed background' = 4))+
geom_vline(xintercept = c(M_lower, M_upper), alpha = 0.5,
lwd = 1) +
ylab('') + xlab('') +
annotate('text', x = c(M_lower, M_upper),
y = c(0,0),
label = c(TeX('$\\mu-d_\\epsilon$'), TeX('$\\mu_s+d_\\epsilon$')),
size = 10) +
theme_bw() + My_Theme
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Fermi LAT example")
rm(list = ls())
library(ggplot2)
library(kdensity)
library(truncdist)
library(VGAM)
library(latex2exp)
real_l <- 1; real_u <- 35
l <- log(real_l); u <- log(real_u)
mean_sig <- 3.5; sd_sig <- sqrt(0.01*3.5^2)
rate_gb <- 1.2
eps <- 1e-3
dat <- read.table('Data_ex1.txt', header = TRUE)
obs <- log(dat$x)
n <- length(obs)
kde <- kdensity(obs)
# SIGNAL DENSITY:
fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(dtrunc(exp(x), spec = 'norm', a = real_l, b = real_u,
mean = mean, sd = sd)*exp(x))
}
# SIGNAL CDF:
Fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(ptrunc(exp(x), spec = 'norm', a = real_l, b = real_u,
mean = mean, sd = sd))
}
# Figuring out (mu_s -d, mu_s + d) that covers an area of 1-eps:
find_d <- function(d)
{
pl <- Fs(log(mean_sig)-d, mean = mean_sig, sd = sd_sig)
pu <- Fs(log(mean_sig)+d, mean = mean_sig, sd = sd_sig)
return(pu-pl-1+eps)
}
sol <- uniroot(find_d, lower = 0, upper = min(log(mean_sig) - l,u - log(mean_sig)))
r <- sol$root
M_lower <- log(mean_sig) - r
M_upper <- log(mean_sig) + r
round(integrate(fs, M_lower, M_upper)$value,5) == 1-eps
# PROPOSAL BACKGROUND DENSITY:
mean1_in_gb <- (exp(M_lower) + mean_sig)/2; sd_in_gb <- 2*sd_sig
mean2_in_gb <- (exp(M_upper) + mean_sig)/2;
gb_test <- function(x, fs_prop = 0)
{
fs_val1 <- fs(x, mean = mean1_in_gb, sd = sd_in_gb)
fs_val2 <- fs(x, mean = mean2_in_gb, sd = sd_in_gb)
qb_val <- dtrunc(x, spec = 'exp', rate = rate_gb, a = l, b = u)
return(fs_prop*fs_val1 + fs_prop*fs_val2 + (1-2*fs_prop)*qb_val)
}
# Area under gb
integrate(gb_test,l,u)
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
ylim(0, 1.8) +
stat_function(fun = kde, col = 'orange') +
stat_function(fun = fs, col = 'blue') +
stat_function(fun = function(t) gb_test(t), col = 'red') +
geom_vline(xintercept = c(M_lower, M_upper))
mycols <- c('red', 'blue', 'green', 'brown', 'orange')
palette(mycols)
my_lty = c(1,2,4,5,3)
fs_prop_seq <- seq(0, 0.04, 0.01)
curve(kde, l, u, xlab = 'log(y)',
ylab = 'Density', lwd = 2.2)
for(j in 1:length(fs_prop_seq))
{temp_fun <- function(t) gb_test(t, fs_prop = fs_prop_seq[j])
curve(temp_fun, l, u, add = TRUE, col = j, lty = my_lty[j], lwd = 2.2)
}
legend(x = 2, y = 0.9, col = 1:length(fs_prop_seq),
lty = my_lty, bty = 'n', lwd =2.2,
legend=TeX(sprintf(r'($\lambda = %f$)', fs_prop_seq)),
cex = 1.5)
# Probably best to use 0.02
gb <- function(t) gb_test(t, fs_prop = 0.02)
My_Theme = theme(
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
ylim(0, 1.8) +
stat_function(fun = kde, col = 'black', lwd = 1.5) +
# stat_function(fun = fs, col = 'blue') +
stat_function(fun = gb, col = 'orange', lwd = 1.5) +
geom_vline(xintercept = c(M_lower, M_upper), alpha = 0.5,
lwd = 1.5) +
xlab('x') + ylab('Density') +
annotate('text', x = c(M_lower, M_upper),
y = c(0,0),
label = c(TeX('$\\mu-d_\\epsilon$'), TeX('$\\mu_s+d_\\epsilon$')),
size = 10) +
theme_bw() + My_Theme
getwd()
getwd()
# Estimated eta:  0.01837047
# Test for eta: null hypothesis (eta = 0) rejected with p-value 0.01040974
library(ggplot2)
source('bases on [l,u] with tuned gb.R')
dat <- read.table('Data_ex1.txt', header = TRUE)
obs <- log(dat$x)
n <- length(obs)
xs <- seq(l, u, length.out = 1e3)
y_sig <- sapply(xs, fs)
y_gb <- sapply(xs, gb)
kde <- kdensity::kdensity(obs)
hs <- hist(obs, probability = TRUE, breaks = 50)
basic_plt <- ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(aes(x = xs, y = y_gb), col = 'red',
lwd = 1.2, alpha = 0.5) +
geom_line(aes(x = xs, y = kde(xs)), col = 'yellow',
lwd = 1.2, alpha = 0.5) +
geom_vline(xintercept = c(log(mean_sig), M_lower, M_upper),
col = c('black', 'blue', 'blue'),
lty = 2, lwd = 1.2, alpha = 0.5)
basic_plt
#-----------------------------------------------------------------
r_vec <- tau_vec <- se_vec <- c()
S1_vec <- sapply(obs, function(t) S1(t, mean = mean_sig,
sd = sd_sig))
(theta <- mean(S1_vec))
se_theta <- sqrt((mean(S1_vec^2) - theta^2)/n)
# testing \eta = 0:
theta/norm_S
# testing for signal:
(t_stat_theta <- theta/se_theta)
pnorm(t_stat_theta, lower.tail = FALSE)
t_stat_theta>qnorm(0.95)
(theta <- theta*(t_stat_theta>qnorm(0.95)))
for (j in 1:length(T_basis)) {
fun_vec <- sapply(obs, T_basis[[j]])
r_vec <- c(r_vec, cor(S1_vec, fun_vec))
tau_vec <- c(tau_vec, mean(fun_vec))
se_vec <- c(se_vec, sqrt((mean(fun_vec^2) - mean(fun_vec)^2)/n))
}
corr_test_taus <- abs(r_vec)/sqrt(1-r_vec^2)<qt(0.975, df = n)/sqrt(n)
mask_for_funs <- c(corr_test_taus)
coefs_to_use <- c(tau_vec)*mask_for_funs
df <- data.frame(fun_names = paste0('T',1:5),
coefs = coefs_to_use,
T_stat = c(coefs_to_use/se_vec))
df <- df[order(abs(df$T_stat), decreasing = TRUE),]
df
fun_indices <- as.numeric(sapply(strsplit(df$fun_names, 'T'), function(t) t[2]))
fun_indices <- fun_indices[df$coefs != 0]
taus_for_aic <- c()
for(i in 1:length(fun_indices))
{
vec <- rep(0, length(T_basis))
vec[fun_indices[1:i]] <- 1
taus_for_aic <- rbind(taus_for_aic, vec*tau_vec)
}
aic_vec <- apply(taus_for_aic, 1, function(t){
2*log_lik(data = obs, theta = theta,
tau = t) - 2*(sum(t!=0) + (theta!=0))
})
aic_vec <- c(aic_vec, rep(NA, nrow(df) - length(aic_vec)))
df$aic <- aic_vec
custom_order <- df$fun_names
df$fun_names <- factor(df$fun_names,
levels = custom_order)
ggplot(df[complete.cases(df),], aes(x = fun_names, y = aic)) +
geom_point(size = 3, col = 'blue', alpha = 0.5) +
geom_line(mapping = aes(y = aic,
x = 1:length(aic)), lwd = 1.2,
alpha = 0.5)
(final_tau <- taus_for_aic[which.max(df$aic),])
res <- sapply(xs, function(t) mod(t, theta = theta, tau = final_tau))
fitted_plot_plugins <- ggplot(mapping = aes(x = obs)) + geom_histogram(mapping =
aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = gb(xs), color = 'Proposal Background'),
lwd = 1.3, alpha = 0.8) +
geom_line(mapping = aes(x = xs, y = as.numeric(res[1,]), color = 'Fitted Mixture'),
linetype = 'dashed', lwd = 1.3, alpha = 0.8) +
geom_line(mapping = aes(x = xs, y = as.numeric(res[2,]), color = 'Fitted Background from Mixture'),
linetype = 'dashed', lwd = 1.3, alpha = 0.8) +
geom_line(aes(x = xs, y = kde(xs), color = 'KDE for mixture'),
lwd = 1.2, alpha = 0.8) +
scale_color_manual(values = c('Proposal Background' = 'red',
'Fitted Mixture' = 'cyan',
'Fitted Background from Mixture' = 'skyblue',
'KDE for mixture' = 'yellow'))
fitted_plot_plugins
theta/norm_S
se_theta/norm_S
# The plot containing both unknown and estimated densities
phi_bkg <- 1.4
eta_true <- 0.02
fb <- function(x)
{
return(dtrunc(exp(x), spec = 'pareto',
shape = phi_bkg, scale = real_l,
a = real_l, b = real_u)*exp(x))
}
f_mix <- function(x)
{
return((1-eta_true)*fb(x)+eta_true*fs(x))
}
y_bkg <- sapply(xs, fb)
y_mix <- sapply(xs, f_mix)
ggplot(mapping = aes(x = obs)) +
geom_histogram(mapping = aes(y = after_stat(density)),
fill = 'grey', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_gb),
lwd = 1, col = 'orange', linetype = 3) +
geom_line(mapping = aes(x = xs, y = y_bkg),
lwd = 1, col = 'red', linetype = 2) +
geom_line(mapping = aes(x = xs, y = y_mix),
lwd = 1, col = 'blue', linetype = 1) +
geom_line(mapping = aes(x = xs, y = as.numeric(res[1,])),
col = 'cyan',linetype = 4, lwd = 1) +
geom_line(mapping = aes(x = xs, y = as.numeric(res[2,])),
col = 'brown',linetype = 5, lwd = 1) +
xlab('log(y)') + ylab('Density') +
theme_bw()
My_Theme = theme(
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(mapping = aes(x = obs)) +
geom_histogram(mapping = aes(y = after_stat(density)),
fill = 'grey', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_gb),
lwd = 1, col = 'orange', linetype = 3) +
geom_line(mapping = aes(x = xs, y = y_bkg),
lwd = 1, col = 'red', linetype = 2) +
geom_line(mapping = aes(x = xs, y = y_mix),
lwd = 1, col = 'blue', linetype = 1) +
geom_line(mapping = aes(x = xs, y = as.numeric(res[1,])),
col = 'cyan',linetype = 4, lwd = 1) +
geom_line(mapping = aes(x = xs, y = as.numeric(res[2,])),
col = 'brown',linetype = 5, lwd = 1) +
xlab('log(y)') + ylab('Density') +
# theme_bw() +
My_Theme
ggplot(mapping = aes(x = obs)) +
geom_histogram(mapping = aes(y = after_stat(density)),
fill = 'grey', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_gb),
lwd = 1, col = 'orange', linetype = 3) +
geom_line(mapping = aes(x = xs, y = y_bkg),
lwd = 1, col = 'red', linetype = 2) +
geom_line(mapping = aes(x = xs, y = y_mix),
lwd = 1, col = 'blue', linetype = 1) +
geom_line(mapping = aes(x = xs, y = as.numeric(res[1,])),
col = 'cyan',linetype = 4, lwd = 1) +
geom_line(mapping = aes(x = xs, y = as.numeric(res[2,])),
col = 'brown',linetype = 5, lwd = 1) +
xlab('log(y)') + ylab('Density') +
theme_bw() +
My_Theme
ggplot(mapping = aes(x = obs)) +
geom_histogram(mapping = aes(y = after_stat(density)),
fill = 'grey', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_gb),
lwd = 1.2, col = 'orange', linetype = 3) +
geom_line(mapping = aes(x = xs, y = y_bkg),
lwd = 1.2, col = 'red', linetype = 2) +
geom_line(mapping = aes(x = xs, y = y_mix),
lwd = 1.2, col = 'blue', linetype = 1) +
geom_line(mapping = aes(x = xs, y = as.numeric(res[1,])),
col = 'cyan',linetype = 4, lwd = 1.2) +
geom_line(mapping = aes(x = xs, y = as.numeric(res[2,])),
col = 'brown',linetype = 5, lwd = 1.2) +
xlab('log(y)') + ylab('Density') +
theme_bw() +
My_Theme
ggplot(mapping = aes(x = obs)) +
geom_histogram(mapping = aes(y = after_stat(density)),
fill = 'grey', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_gb),
lwd = 1.2, col = 'orange', linetype = 6) +
geom_line(mapping = aes(x = xs, y = y_bkg),
lwd = 1.2, col = 'red', linetype = 2) +
geom_line(mapping = aes(x = xs, y = y_mix),
lwd = 1.2, col = 'blue', linetype = 1) +
geom_line(mapping = aes(x = xs, y = as.numeric(res[1,])),
col = 'cyan',linetype = 4, lwd = 1.2) +
geom_line(mapping = aes(x = xs, y = as.numeric(res[2,])),
col = 'brown',linetype = 5, lwd = 1.2) +
xlab('log(y)') + ylab('Density') +
theme_bw() +
My_Theme
rm(list = ls())
library(ggplot2)
library(kdensity)
library(truncdist)
library(VGAM)
library(latex2exp)
real_l <- 1; real_u <- 35
l <- log(real_l); u <- log(real_u)
mean_sig <- 3.5; sd_sig <- sqrt(0.01*3.5^2)
phi_bkg <- 1.4
eta_true <- 0.02
dat <- read.table('Data_ex1.txt', header = TRUE)
obs <- log(dat$x)
n <- length(obs)
# SIGNAL DENSITY:
fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(dtrunc(exp(x), spec = 'norm', a = real_l, b = real_u,
mean = mean, sd = sd)*exp(x))
}
# BACKGROUND DENSITY
fb <- function(x)
{
return(dtrunc(exp(x), spec = 'pareto',
shape = phi_bkg, scale = real_l,
a = real_l, b = real_u)*exp(x))
}
# MISTURE DENSITY
f_mix <- function(x)
{
return((1-eta_true)*fb(x)+eta_true*fs(x))
}
dat <- read.table('Data_ex1.txt', header = TRUE)
obs <- log(dat$x)
n <- length(obs)
xs <- seq(l, u, length.out = 1e3)
y_bkg <- sapply(xs, fb)
y_mix <- sapply(xs, f_mix)
hs <- hist(obs, probability = TRUE, breaks = 50)
My_Theme = theme(
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
basic_plt <- ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(density)),
fill = 'grey', col = 'black',
breaks = hs$breaks) +
geom_line(aes(x = xs, y = y_bkg), col = 'red', linetype = 2,
lwd = 1) +
geom_line(aes(x = xs, y = y_mix), col = 'blue', linetype = 1,
lwd = 1) + xlab('log(y)')+ylab('Density') +
theme_bw() +
My_Theme
basic_plt
rm(list = ls())
library(ggplot2)
library(kdensity)
library(truncdist)
library(VGAM)
library(latex2exp)
real_l <- 1; real_u <- 35
l <- log(real_l); u <- log(real_u)
mean_sig <- 3.5; sd_sig <- sqrt(0.01*3.5^2)
phi_bkg <- 1.4
eta_true <- 0.02
dat <- read.table('Data_ex1.txt', header = TRUE)
obs <- log(dat$x)
n <- length(obs)
# SIGNAL DENSITY:
fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(dtrunc(exp(x), spec = 'norm', a = real_l, b = real_u,
mean = mean, sd = sd)*exp(x))
}
# BACKGROUND DENSITY
fb <- function(x)
{
return(dtrunc(exp(x), spec = 'pareto',
shape = phi_bkg, scale = real_l,
a = real_l, b = real_u)*exp(x))
}
# MISTURE DENSITY
f_mix <- function(x)
{
return((1-eta_true)*fb(x)+eta_true*fs(x))
}
dat <- read.table('Data_ex1.txt', header = TRUE)
obs <- log(dat$x)
n <- length(obs)
xs <- seq(l, u, length.out = 1e3)
y_bkg <- sapply(xs, fb)
y_mix <- sapply(xs, f_mix)
hs <- hist(obs, probability = TRUE, breaks = 50)
My_Theme = theme(
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
basic_plt <- ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(density)),
fill = 'grey', col = 'black',
breaks = hs$breaks) +
geom_line(aes(x = xs, y = y_bkg), col = 'red', linetype = 2,
lwd = 1.2) +
geom_line(aes(x = xs, y = y_mix), col = 'blue', linetype = 1,
lwd = 1.2) + xlab('log(y)')+ylab('Density') +
theme_bw() +
My_Theme
basic_plt
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/Signal_Normal - Background_Normal - 2 (delta checking)")
library(latex2exp)
source('designing gb-2 bumps.R')
fb <- function(x) dtrunc(x, spec = 'norm',
mean = mean_back, sd = sd_back,
a = l, b = u)
f_mix <- function(x) eta_true*fs(x)+(1-eta_true)*fb(x)
My_Theme = theme(
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.text=element_text(size= 12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(data.frame(x = c(l,u)), aes(x)) +
stat_function(fun = fb, aes(linetype = 'true background'), size = 1) +
stat_function(fun = f_mix, aes(linetype = 'true mixture'), size = 1) +
stat_function(fun = gb, aes(linetype = 'proposed background'), size = 1) +
scale_linetype_manual('', values = c('true background' = 2,
'true mixture' = 1,
'proposed background' = 4))+
geom_vline(xintercept = c(M_lower, M_upper), alpha = 0.5,
lwd = 1) +
ylab('') + xlab('') +
annotate('text', x = c(M_lower, M_upper),
y = c(0,0),
label = c(TeX('$\\mu_s-d_\\epsilon$'), TeX('$\\mu_s+d_\\epsilon$')),
size = 10) +
theme_bw() + My_Theme
