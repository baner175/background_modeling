integrate(function(t) T3_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T4_normed(t)*gb(t), l, u)$value |> round(10)
source('bases on [l,u] - gb with 2 bumps.R')
integrate(function(t) S1(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T1_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T1_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T4_normed(t)*gb(t), l, u)$value |> round(10)
source('bases on [l,u] - gb with 2 bumps.R')
integrate(function(t) S1(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T1_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T1_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T4_normed(t)*gb(t), l, u)$value |> round(10)
getwd()
source('bases on [l,u] - gb with 2 bumps.R')
integrate(function(t) S1(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T1_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T1_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T4_normed(t)*gb(t), l, u)$value |> round(10)
source('bases on [l,u] - gb with 2 bumps.R')
integrate(function(t) S1(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T1_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T1_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T4_normed(t)*gb(t), l, u)$value |> round(10)
source('bases on [l,u] - gb with 2 bumps.R')
library(ggplot2)
xs <- seq(l,u,0.01)
y_sig <- sapply(xs, fs)
y_kde <- sapply(xs, kde)
y_gb <- sapply(xs, gb)
obs_new <- read.csv('test_data.csv', header = TRUE)$x
hs <- hist(obs_new, breaks = 50, probability = TRUE)
basic_plt<- ggplot(mapping = aes(x = obs_new)) +
ylim(0, .5) +
geom_histogram(mapping = aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_kde, color = 'KDE for Mixture'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_gb, color = 'Proposal Background'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_sig, color = 'True Signal'),
lwd = 1.3) +
scale_color_manual(values = c('KDE for Mixture' = 'black',
'Proposal Background' = 'red',
'True Signal' = 'blue')) +
geom_vline(xintercept = c(M_lower, M_upper),
lwd = 1.3, lty = 2, color = 'grey')
basic_plt
r_vec <- tau_vec <- se_vec <- c()
S1_vec <- sapply(obs_new, function(t) S1(t, mean = mean_sig,
sd = sd_sig))
(theta <- mean(S1_vec))
se_theta <- sqrt((mean(S1_vec^2) - theta^2)/n)
for (j in 1:length(T_basis)) {
fun_vec <- sapply(obs_new, T_basis[[j]])
r_vec <- c(r_vec, cor(S1_vec, fun_vec))
tau_vec <- c(tau_vec, mean(fun_vec))
se_vec <- c(se_vec, sqrt((mean(fun_vec^2) - mean(fun_vec)^2)/n))
}
# testing \eta = 0:
theta/norm_S
# testing for signal:
(t_stat_theta <- theta/se_theta)
t_stat_theta>qnorm(0.95)
pnorm(t_stat_theta, lower.tail = FALSE)
rm(list = ls())
source('bases on [l,u] - gb with 2 bumps.R')
library(doSNOW)
library(foreach)
library(iterators)
n_rep <- 1e4 # do it for 1e4
n_samp <- 1e3
# UNKNOWN DENSITIES:
mean_back <- 0.5; sd_back <- 2.5; eta_true <- 0.03
fb <- function(t) dtrunc(t, spec = 'norm', a = l, b = u,
mean = mean_back, sd = sd_back)
f_mix <- function(t) eta_true*fs(t) + (1-eta_true)*fb(t)
eta_seq <- seq(0, 0.06, 0.03)
theta_vec <- c()
t_stat_vec <- c()
set.seed(12345)
numCores <- detectCores()
cl <- makeSOCKcluster(numCores)
registerDoSNOW(cl)
pb <- txtProgressBar(max=n_rep*length(eta_seq), style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- options(progress = progress)
time_elapsed <- system.time({
result_eta <- foreach(j = icount(length(eta_seq)),
.packages = c('truncdist', 'tcltk')) %:%
foreach(i = icount(n_rep), .combine = rbind,
.packages = c('truncdist', 'tcltk'),
.options.snow = opts) %dopar%
{
sig <- rtrunc(n_samp, spec = 'norm', a = l, b = u,
mean = mean_sig, sd = sd_sig)
back <- rtrunc(n_samp, spec = 'norm', a = l, b = u,
mean = mean_back, sd = sd_back)
u_mask <- runif(n_samp)
obs_new <- ifelse(u_mask<eta_seq[j], sig, back)
S1_vec <- sapply(obs_new, function(t) S1(t, mean = mean_sig,
sd = sd_sig))
theta <- mean(S1_vec)
se_theta <- sqrt((mean(S1_vec^2) - theta^2)/n_samp)
t_stat <- theta/se_theta
c(t_stat, theta, se_theta)
}
})
stopCluster(cl)
print(time_elapsed) #took 21 minutes
result_eta
mean(result_eta[[1]][,1]>qnorm(0.95)) # 0.0111
mean(result_eta[[2]][,1]>qnorm(0.95)) # 0.9126
mean(result_eta[[3]][,1]>qnorm(0.95)) # 1
theta_vec_null <- result_eta[[1]][,2]
(delta <- integrate(function(t) fb(t)*S1(t), l, u)$value)
sd_theta <- (integrate(function(t) fb(t)*S1(t)^2, l, u)$value - delta^2)/sqrt(n_samp)
hist(theta_vec_null, probability = TRUE, breaks = 50)
true_dist <- function(t) dnorm(t, mean = delta, sd =sd_theta)
curve(true_dist, add = TRUE, col = 'blue')
abline(v = delta, col = 'red', lty = 2)
print(time_elapsed) #took 21 minutes
1416/60
mean(result_eta[[1]][,1]>qnorm(0.95)) # 0.0078
mean(result_eta[[2]][,1]>qnorm(0.95)) # 0.5896
mean(result_eta[[3]][,1]>qnorm(0.95)) # 0.9947
rm(list = ls())
setwd("C:/Users/Aritra/OneDrive/Desktop/Research/Work with Sara/R-Codes/New example/Analysis on full data")
rm(list = ls())
library(truncdist)
library(ggplot2)
obs <- read.csv('full_data.csv', header = TRUE)$x
n <- length(obs)
l <- 1; u <- 5
mean_sig <- 2.5; sd_sig <- 0.1
rate_gb <- 0.35
eps <- 1e-3
fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(dtrunc(x, spec = 'norm', a = l, b = u,
mean = mean, sd = sd))
}
Fs <- function(x, mean = mean_sig, sd = sd_sig)
{
return(ptrunc(x, spec = 'norm', a = l, b = u,
mean = mean, sd = sd))
}
find_d <- function(d)
{
pl <- Fs(mean_sig-d, mean = mean_sig, sd = sd_sig)
pu <- Fs(mean_sig+d, mean = mean_sig, sd = sd_sig)
return(pu-pl-1+eps)
}
sol <- uniroot(find_d, lower = 0, upper = min(mean_sig - l,u - mean_sig))
r <- sol$root
(M_lower <- mean_sig - r)
(M_upper <- mean_sig + r)
round(integrate(fs, M_lower, M_upper)$value,5) == 1-eps
hs <- hist(obs, probability = TRUE, breaks = 50)
ggplot(mapping = aes(x = obs)) +
geom_histogram(aes(y = after_stat(..density..)),
breaks = hs$breaks,
fill = 'steelblue', col = 'black')
kde <- kdensity::kdensity(obs)
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
ylim(0, 0.6) +
stat_function(fun = kde, col = 'orange') +
stat_function(fun = fs, col = 'blue') +
geom_vline(xintercept = c(M_lower, M_upper))
mean1_in_gb <- (M_lower + mean_sig)/2; sd_in_gb <- 1.9*sd_sig
mean2_in_gb <- (M_upper + mean_sig)/2;
gb_test <- function(x, fs_prop = 0)
{
fs_val_1 <- fs(x, mean = mean1_in_gb, sd = sd_in_gb)
fs_val_2 <- fs(x, mean = mean2_in_gb, sd = sd_in_gb)
gb_val <- dtrunc(x, spec = 'exp', rate = rate_gb, a = l, b = u)
return((fs_prop)*fs_val_1 + (fs_prop)*fs_val_2 + (1-2*fs_prop)*gb_val)
}
integrate(gb_test, l, u)
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
ylim(0, 0.5) +
stat_function(fun = kde, col = 'orange') +
stat_function(fun = fs, col = 'blue') +
stat_function(fun = function(t) gb_test(t), col = 'red') +
geom_vline(xintercept = c(M_lower, M_upper))
curve(kde, l, u)
abline(v = c(M_lower, M_upper))
fs_prop_seq <- seq(0, 0.03, 0.005)
for(j in 1:length(fs_prop_seq))
{temp_fun <- function(t) gb_test(t, fs_prop = fs_prop_seq[j])
curve(temp_fun, l, u, add = TRUE, col = j, lty = 2)
}
legend('topright', col = 1:length(fs_prop_seq),
lty = 2, bty = 'n', legend = as.character(fs_prop_seq))
gb <- function(t) gb_test(t, fs_prop = 0.02)
ggplot(data=data.frame(x = c(l,u)), mapping = aes(x = x)) +
ylim(0, 0.5) +
stat_function(fun = kde, col = 'orange') +
stat_function(fun = fs, col = 'blue') +
stat_function(fun = gb, col = 'red') +
geom_vline(xintercept = c(M_lower, M_upper))
source('bases on [l,u] - gb with 2 bumps.R')
integrate(function(t) S1(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T1_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)^2*gb(t), l, u)$value |> round(10)
integrate(function(t) S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T1_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*S1(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T2_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T1_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T3_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T2_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T4_normed(t)*T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T3_normed(t)*gb(t), l, u)$value |> round(10)
integrate(function(t) T5_normed(t)*T4_normed(t)*gb(t), l, u)$value |> round(10)
source('bases on [l,u] - gb with 2 bumps.R')
library(ggplot2)
xs <- seq(l,u,0.01)
y_sig <- sapply(xs, fs)
y_kde <- sapply(xs, kde)
y_gb <- sapply(xs, gb)
obs_new <- read.csv('test_data.csv', header = TRUE)$x
hs <- hist(obs_new, breaks = 50, probability = TRUE)
basic_plt<- ggplot(mapping = aes(x = obs_new)) +
ylim(0, .5) +
geom_histogram(mapping = aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_kde, color = 'KDE for Mixture'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_gb, color = 'Proposal Background'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_sig, color = 'True Signal'),
lwd = 1.3) +
scale_color_manual(values = c('KDE for Mixture' = 'black',
'Proposal Background' = 'red',
'True Signal' = 'blue')) +
geom_vline(xintercept = c(M_lower, M_upper),
lwd = 1.3, lty = 2, color = 'grey')
source('bases on [l,u] - gb with 2 bumps.R')
library(ggplot2)
xs <- seq(l,u,0.01)
y_sig <- sapply(xs, fs)
y_kde <- sapply(xs, kde)
y_gb <- sapply(xs, gb)
obs_new <- read.csv('full_data.csv', header = TRUE)$x
hs <- hist(obs_new, breaks = 50, probability = TRUE)
basic_plt<- ggplot(mapping = aes(x = obs_new)) +
ylim(0, .5) +
geom_histogram(mapping = aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_kde, color = 'KDE for Mixture'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_gb, color = 'Proposal Background'),
lwd = 1.3) +
geom_line(mapping = aes(x = xs, y = y_sig, color = 'True Signal'),
lwd = 1.3) +
scale_color_manual(values = c('KDE for Mixture' = 'black',
'Proposal Background' = 'red',
'True Signal' = 'blue')) +
geom_vline(xintercept = c(M_lower, M_upper),
lwd = 1.3, lty = 2, color = 'grey')
basic_plt
r_vec <- tau_vec <- se_vec <- c()
S1_vec <- sapply(obs_new, function(t) S1(t, mean = mean_sig,
sd = sd_sig))
(theta <- mean(S1_vec))
se_theta <- sqrt((mean(S1_vec^2) - theta^2)/n)
for (j in 1:length(T_basis)) {
fun_vec <- sapply(obs_new, T_basis[[j]])
r_vec <- c(r_vec, cor(S1_vec, fun_vec))
tau_vec <- c(tau_vec, mean(fun_vec))
se_vec <- c(se_vec, sqrt((mean(fun_vec^2) - mean(fun_vec)^2)/n))
}
# testing \eta = 0:
theta/norm_S
# testing for signal:
(t_stat_theta <- theta/se_theta)
t_stat_theta>qnorm(0.95)
pnorm(t_stat_theta, lower.tail = FALSE)
(theta <- theta*(t_stat_theta>qnorm(0.95)))
corr_test_taus <- abs(r_vec)/sqrt(1-r_vec^2)<qt(0.975, df = n)/sqrt(n)
mask_for_funs <- c(corr_test_taus)
coefs_to_use <- c(tau_vec)*mask_for_funs
df <- data.frame(fun_names = paste0('T',1:5),
coefs = coefs_to_use,
T_stat = c(coefs_to_use/se_vec))
df <- df[order(abs(df$T_stat), decreasing = TRUE),]
df
fun_indices <- as.numeric(sapply(strsplit(df$fun_names, 'T'), function(t) t[2]))
fun_indices <- fun_indices[df$coefs != 0]
taus_for_aic <- c()
for(i in 1:length(fun_indices))
{
vec <- rep(0, length(T_basis))
vec[fun_indices[1:i]] <- 1
taus_for_aic <- rbind(taus_for_aic, vec*tau_vec)
}
aic_vec <- apply(taus_for_aic, 1, function(t){
2*log_lik(data = obs_new, theta = theta,
tau = t) - 2*(sum(t!=0) + (theta != 0))
})
aic_vec <- c(aic_vec, rep(NA, nrow(df) - length(aic_vec)))
df$aic <- aic_vec
custom_order <- df$fun_names
df$fun_names <- factor(df$fun_names,
levels = custom_order)
ggplot(df[complete.cases(df),], aes(x = fun_names, y = aic)) +
geom_point(size = 3, col = 'blue', alpha = 0.5) +
geom_line(mapping = aes(y = aic,
x = 1:length(aic)), lwd = 1.2,
alpha = 0.5)
(final_tau <- taus_for_aic[which.max(df$aic),])
res <- sapply(xs, function(t) mod(t, theta = theta, tau = final_tau))
fitted_plot_plugins <- ggplot(mapping = aes(x = obs_new)) +
ylim(0, .5) +
geom_histogram(mapping = aes(y = after_stat(density)),
fill = 'steelblue', col = 'black',
breaks = hs$breaks) +
geom_line(mapping = aes(x = xs, y = y_kde, color = 'KDE for Mixture'),
lwd = 1.3, alpha =0.5) +
geom_line(mapping = aes(x = xs, y = y_gb, color = 'Proposal Background'),
lwd = 1.3, alpha =0.5) +
geom_line(mapping = aes(x = xs, y = y_sig, color = 'True Signal'),
lwd = 1.3, alpha =0.5) +
geom_vline(xintercept = c(M_lower, M_upper),
lwd = 1.3, lty = 2, color = 'grey') +
geom_line(mapping = aes(x = xs, y = as.numeric(res[1,]), color = 'Fitted Mixture'),
linetype = 'dashed', lwd = 1.3, alpha =0.5) +
geom_line(mapping = aes(x = xs, y = as.numeric(res[2,]), color = 'Fitted Background from Mixture'),
linetype = 'dashed', lwd = 1.3, alpha =0.5) +
scale_color_manual(values = c('KDE for Mixture' = 'black',
'Proposal Background' = 'red',
'True Signal' = 'blue',
'Fitted Mixture' = 'orange',
'Fitted Background from Mixture' = 'skyblue'))
fitted_plot_plugins
mean(S1_vec)/norm_S
rm(list = ls())
source('bases on [l,u] - gb with 2 bumps.R')
library(doSNOW)
library(foreach)
library(iterators)
n_rep <- 1e4 # do it for 1e4
n_samp <- 1e3
# UNKNOWN DENSITIES:
mean_back <- 0.5; sd_back <- 2.5; eta_true <- 0.03
fb <- function(t) dtrunc(t, spec = 'norm', a = l, b = u,
mean = mean_back, sd = sd_back)
f_mix <- function(t) eta_true*fs(t) + (1-eta_true)*fb(t)
eta_seq <- seq(0, 0.06, 0.03)
theta_vec <- c()
t_stat_vec <- c()
set.seed(12345)
numCores <- detectCores()
cl <- makeSOCKcluster(numCores)
registerDoSNOW(cl)
pb <- txtProgressBar(max=n_rep*length(eta_seq), style=3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- options(progress = progress)
time_elapsed <- system.time({
result_eta <- foreach(j = icount(length(eta_seq)),
.packages = c('truncdist', 'tcltk')) %:%
foreach(i = icount(n_rep), .combine = rbind,
.packages = c('truncdist', 'tcltk'),
.options.snow = opts) %dopar%
{
sig <- rtrunc(n_samp, spec = 'norm', a = l, b = u,
mean = mean_sig, sd = sd_sig)
back <- rtrunc(n_samp, spec = 'norm', a = l, b = u,
mean = mean_back, sd = sd_back)
u_mask <- runif(n_samp)
obs_new <- ifelse(u_mask<eta_seq[j], sig, back)
S1_vec <- sapply(obs_new, function(t) S1(t, mean = mean_sig,
sd = sd_sig))
theta <- mean(S1_vec)
se_theta <- sqrt((mean(S1_vec^2) - theta^2)/n_samp)
t_stat <- theta/se_theta
c(t_stat, theta, se_theta)
}
})
stopCluster(cl)
print(time_elapsed) #took 23 minutes
1059/60
mean(result_eta[[1]][,1]>qnorm(0.95)) # 0.0078
mean(result_eta[[2]][,1]>qnorm(0.95)) # 0.5896
mean(result_eta[[3]][,1]>qnorm(0.95)) # 0.9947
theta_vec_null <- result_eta[[1]][,2]
(delta <- integrate(function(t) fb(t)*S1(t), l, u)$value)
sd_theta <- (integrate(function(t) fb(t)*S1(t)^2, l, u)$value - delta^2)/sqrt(n_samp)
hist(theta_vec_null, probability = TRUE, breaks = 50)
true_dist <- function(t) dnorm(t, mean = delta, sd =sd_theta)
curve(true_dist, add = TRUE, col = 'blue')
abline(v = delta, col = 'red', lty = 2)
